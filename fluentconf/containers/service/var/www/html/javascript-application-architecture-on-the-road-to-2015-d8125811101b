<!DOCTYPE html><html xmlns:cc="http://creativecommons.org/ns#"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><title>JavaScript Application Architecture On The Road To 2015 — Google Developers — Medium</title><link rel="canonical" href="https://medium.com/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b"><meta name="title" content="JavaScript Application Architecture On The Road To 2015 — Google Developers"><meta name="referrer" content="always"><meta name="description" content="On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundament…"><meta property="og:site_name" content="Medium"><meta property="og:title" content="JavaScript Application Architecture On The Road To 2015 — Google Developers"><meta property="og:url" content="https://medium.com/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b"><meta property="og:image" content="https://cdn-images-1.medium.com/max/800/1*8fuXs-f2LJHYnEfxGKYdLA.png"><meta property="fb:app_id" content="542599432471018"><meta property="og:description" content="On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundament…"><meta name="twitter:site" content="@Medium"><meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/800/1*8fuXs-f2LJHYnEfxGKYdLA.png"><link rel="publisher" href="https://plus.google.com/103654360130207659246"><link rel="author" href="https://medium.com/@addyosmani"><meta name="author" content="Addy Osmani"><meta property="og:type" content="article"><meta name="twitter:card" content="summary_large_image"><meta property="article:publisher" content="https://www.facebook.com/medium"><meta property="article:author" content="https://medium.com/@addyosmani"><meta property="fb:smart_publish:robots" content="noauto"><meta property="article:published_time" content="2014-12-15T13:26:04.037Z"><meta name="twitter:creator" content="@addyosmani"><meta name="twitter:app:name:iphone" content="Medium"><meta name="twitter:app:id:iphone" content="828256236"><meta name="twitter:app:url:iphone" content="medium:/p/d8125811101b"><meta property="al:ios:app_name" content="Medium"><meta property="al:ios:app_store_id" content="828256236"><meta property="al:android:package" content="com.medium.reader"><meta property="al:android:app_name" content="Medium"><meta property="al:ios:url" content="medium:/p/d8125811101b"><meta property="al:android:url" content="medium://p/d8125811101b"><meta property="al:web:url" content="https://medium.com/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b"><link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/d8125811101b" /><meta name="theme-color" content="#000000"><link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-base.VzyPz4jos5FyyiYfuOx6fQ.css"><script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}var _gaq = _gaq || []; _gaq.push(["_setAccount", "UA-24232453-2"]); _gaq.push(["_setDomainName", window.location.hostname]); _gaq.push(["_setAllowLinker", true]); _gaq.push(["_trackPageview"]); _asyncScript(("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js");(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script><script>(function () {var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; document.write("<style>section.section-image--fullBleed.is-backgrounded {padding-top: " + Math.round(1.1 * height) + "px;}section.section-image--fullScreen.is-backgrounded, section.section-image--coverFade.is-backgrounded {min-height: " + height + "px; padding-top: " + Math.round(0.5 * height) + "px;}.u-sizeViewHeight100 {height: " + height + "px !important;}.u-sizeViewHeightMin100 {min-height: " + height + "px !important;}section.section-image--coverFade, .section-image--fullScreen > .section-background, .section-image--coverFade > .section-background, .section-image--fullBleed .section-backgroundImage, .section-image--fullScreen .section-backgroundImage, .section-image--coverFade .section-backgroundImage {height: " + height + "px;}.section-image--content > .section-background, .section-image--content .section-backgroundImage, .section-aspectRatioViewportPlaceholder, .section-aspectRatioViewportCropPlaceholder {max-height: " + height + "px;}.section-image--fullBleed > .section-background {height: " + Math.round(1.1 * height) + "px;}.section-aspectRatioViewportBottomSpacer, .section-aspectRatioViewportBottomPlaceholder {max-height: " + Math.round(0.5 * height) + "px;}.zoomable:before {top: " + (-1 * height) + "px; left: " + (-1 * width) + "px; padding: " + height + "px " + width + "px;}</style>");})()</script><!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]--><link rel="shortcut icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-new.TAS6uQ-Y7kcKgi0xjcYHXw.ico"><link rel="apple-touch-icon" sizes="152x152" href="/apple-touch-icon-ipad-retina.png"><link rel="apple-touch-icon" sizes="120x120" href="/apple-touch-icon-iphone-retina.png"><link rel="apple-touch-icon" sizes="76x76" href="/apple-touch-ipad.png"><link rel="apple-touch-icon" href="/apple-touch-icon.png"></head><body itemscope itemtype="http://schema.org/Article" class=" template-flex-article is-noJs"><script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script><div class="site-main" id="container"><div class="butterBar butterBar--error"></div><div class="surface"><div id="prerendered" class="screenContent"><canvas class="canvas-renderer"></canvas><nav class="metabar u-clearfix js-metabar metabar--top metabar--postArticle"><div class="metabar-block metabar-left u-floatLeft"><a href="https://medium.com/" class="siteNav-logo" data-log-event="home"><svg viewBox="0 0 45 45" width="45" height="45" class="svgIcon svgIcon--logoNew svgIcon-size--45px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-logoNew-45px-p0"></use><use class="svgIcon-use svgIcon-use--part1" xlink:href="#svg-logoNew-45px-p1"></use><use class="svgIcon-use svgIcon-use--part2" xlink:href="#svg-logoNew-45px-p2"></use><use class="svgIcon-use svgIcon-use--part3" xlink:href="#svg-logoNew-45px-p3"></use></svg><span class="u-textScreenReader">Homepage</span></a><span class="metabar-divider metabar-divider--first u-showOnMobile"></span><span class="postMetaInline postMetaInline--avatar u-showOnMobile"><a class="link avatar avatar--roundedRectangle"  href="https://medium.com/google-developers?source=avatarTopMetabar-lo_9733c1bc4e7a-2e5ce7f173a5" title="Go to Google Developers" aria-label="Go to Google Developers" data-action-source="avatarTopMetabar-lo_9733c1bc4e7a-2e5ce7f173a5"><img src="https://cdn-images-1.medium.com/fit/c/32/32/1*YPxqkb8PlWYBtLLJiPWNbg.png" class="avatar-image avatar-image--icon" alt="Google Developers"></a></span></div><div class="metabar-block metabar-center"><a class="metabar-logoWrapper js-logCollection" href="https://medium.com/google-developers?source=logo-lo_9733c1bc4e7a-2e5ce7f173a5"><img class="metabar-logo" src="https://cdn-images-1.medium.com/fit/c/220/36/1*RqZskYptQFu8L7P1rd1OIA.png?source=logoAvatar-lo_9733c1bc4e7a-2e5ce7f173a5" alt="Published in Google Developers"/></a></div><div class="metabar-block metabar-right u-floatRight"><div class="buttonSet"></div><div class="inputGroup u-xs-hide metabar-predictiveSearch"><button class="button button--chromeless button--inline button--withIcon is-inSiteNavBar button--withSvgIcon"  title="Click to start typing a search term" aria-label="Click to start typing a search term" data-action="focus-search-input"><svg viewBox="0 0 25 25" width="25" height="25" class="svgIcon svgIcon--search svgIcon-size--25px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-search-25px-p0"></use></svg></button><input class="js-predictiveSearchInput textInput textInput--rounded textInput--dark" type="search" placeholder="Search Medium"></div><div class="buttonSet"><button class="button button--circle button--withChrome button--withIcon is-inSiteNavBar u-showOnMobile button--withSvgIcon"  title="Search" aria-label="Search" data-action="open-search"><svg viewBox="0 0 25 25" width="25" height="25" class="svgIcon svgIcon--search svgIcon-size--25px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-search-25px-p0"></use></svg></button><a class="button button--primary button--withChrome"  href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.com%3A443%2Fgoogle-developers%2Fjavascript-application-architecture-on-the-road-to-2015-d8125811101b"data-action="sign-in-prompt"data-redirect="https://medium.com:443/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b" data-action-source="nav_signup">Sign in / Sign up</a></div></div></nav><div class="postActionsBar js-postActionsBar"><div class="postActionsBar-container container u-size740"><div class="postActionsBar-content row js-postActionsBarContent"><div class="postActions col u-xs-size12of12"><div class="u-floatLeft buttonSet buttonSet--withLabels"><div class="buttonSet-inner"><div class="js-actionRecommend" data-post-id="d8125811101b" data-size="29px"><button class="button button--primary button--large button--chromeless button--withIcon button--withSvgIcon"  title="Recommend to share this article with your followers and let the author know you liked it" aria-label="Recommend to share this article with your followers and let the author know you liked it"data-action="sign-in-prompt" data-sign-in-action="upvote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/d8125811101b"><span class="button-defaultState"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--heart svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-heart-29px-p0"></use></svg></span><span class="button-activeState"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--heartFilled svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-heartFilled-29px-p0"></use></svg></span></button><button class="button button--chromeless"  data-action="show-recommends" data-action-value="d8125811101b">990</button></div></div><div class="buttonSet-inner"><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="scroll-to-responses"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--response svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-response-29px-p0"></use></svg></button><button class="button button--chromeless"  data-action="scroll-to-responses">3</button></div></div><div class="u-floatRight buttonSet"><div class="buttonSet-inner"><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="share-on-twitter"value="d8125811101b"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--twitter svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-twitter-29px-p0"></use></svg></button></div><div class="buttonSet-inner"><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="share-on-facebook"value="d8125811101b"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--facebook svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-facebook-29px-p0"></use></svg></button></div><div class="buttonSet-separator"></div><div class="buttonSet-inner"><a class="link avatar avatar--inline"  href="https://medium.com/@addyosmani" data-action="show-user-card" data-action-type="hover" data-user-id="2508e4c7a8ec" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/24/24/0*reRpQxs2HZap9q6V.jpeg" class="avatar-image avatar-image--micro" alt="Go to the profile of Addy Osmani"><span class="avatar-text">Addy Osmani</span></a><span class="u-xs-hide"><span class="middotDivider"></span><span class="followState js-followState" data-user-id="2508e4c7a8ec"><button class="button button--chromeless u-noUserSelect button--withHover button--unblock js-unblockButton" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="post_actions_bar"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--chromeless u-noUserSelect button--follow js-followButton"  title="Follow to get new stories and recommendations from this author" aria-label="Follow to get new stories and recommendations from this author"data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/2508e4c7a8ec/d8125811101b" data-action-source="post_actions_bar_follow"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span></span></div></div></div></div></div></div><article class="u-sizeViewHeightMin100 postArticle postArticle--full" lang="en"><header class="container is-underMetabar u-size740"><div class="postMetaHeader row u-xs-top10 u-xs-bottom10"><div class="col u-xs-size5of12"><div class="u-floatLeft"><div class="postMetaInline-avatar"><a class="link avatar"  href="https://medium.com/@addyosmani" data-action="show-user-card" data-action-type="hover" data-user-id="2508e4c7a8ec" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/36/36/0*reRpQxs2HZap9q6V.jpeg" class="avatar-image u-xs-size32x32 u-sm-size36x36" alt="Go to the profile of Addy Osmani"></a></div><div class="postMetaInline-feedSummary"><a class="link link link--darken link--accent"  href="https://medium.com/@addyosmani" data-action="show-user-card" data-action-type="hover" data-user-id="2508e4c7a8ec" dir="auto">Addy Osmani</a><span class="postMetaInline postMetaInline--supplemental">Dec 15, 2014<span class="middotDivider"></span><span class="readingTime">16 min read</span></span></div></div></div><div class="col u-xs-size7of12"><div class="u-floatRight"><div class="postMetaHeader-socialProof"></div></div></div></div></header><main role="main" class="postArticle-content js-postField js-notesSource"><section name="e8cd" class=" section--body section--first section--last"><div class="section-divider layoutSingleColumn"><hr class="section-divider"></div><div class="section-content"><div class="section-inner layoutSingleColumn"><h2 name="13fe" id="13fe" class="graf--h2 graf--first">JavaScript Application Architecture On The Road To 2015</h2><p name="8a7a" id="8a7a" class="graf--p graf-after--h2">I once told someone I was an architect. It’s true in a way since I now have to design an intricate web of lies to back it up. On a serious note, I thought it might be salutary to look at the state of application architecture in the JavaScript community as we ebb our way towards 2015. I’ll talk about composition, functional boundaries, modularity, immutable data structures, CSP channels and a few other related topics.</p><h3 name="867c" id="867c" class="graf--h3 graf-after--p">Composition</h3><p name="e592" id="e592" class="graf--p graf-after--h3">On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundamental way in the last few years. Once you remove the minutia of machinery bringing forth unidirectional <strong class="markup--strong markup--p-strong">data-binding</strong>, <strong class="markup--strong markup--p-strong">immutable data-structures</strong> and <strong class="markup--strong markup--p-strong">virtual-DOM</strong> (all of which are interesting problem spaces) the one key concept that many devs seem to have organically converged on is <strong class="markup--strong markup--p-strong">composition</strong>. Composition is incredibly powerful, allowing us to stitch together reusable pieces of functionality to “compose” a larger application. Composition ushers in a mindset of things being good when they’re <a href="http://addyosmani.com/first" data-href="http://addyosmani.com/first" class="markup--anchor markup--p-anchor" rel="nofollow">modular</a>, smaller and easier to test. Easier to reason with. Easier to distribute. Heck, just look at how well that works for Node.</p></div><div class="section-inner sectionLayout--outsetColumn"><figure name="0f14" id="0f14" class="graf--figure graf--layoutOutsetCenter graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 1020px; max-height: 578px;"><div class="aspect-ratio-fill" style="padding-bottom: 56.699999999999996%;"></div><img class="graf-image" data-image-id="1*8fuXs-f2LJHYnEfxGKYdLA.png" data-width="2568" data-height="1456" data-action="zoom" data-action-value="1*8fuXs-f2LJHYnEfxGKYdLA.png" src="https://cdn-images-1.medium.com/max/1200/1*8fuXs-f2LJHYnEfxGKYdLA.png"></div><figcaption class="imageCaption">A model for composition where an application is composed of smaller pieces of reusable UI which themselves are composed from extending and reusing existing modules and libraries.</figcaption></figure></div><div class="section-inner layoutSingleColumn"><p name="b809" id="b809" class="graf--p graf-after--figure">Composition is one of the reasons we regularly talk about React “Components”, “Ember.Component”s, Angular directives, Polymer elements and of course, straight-up Web Components. We may argue about the frameworks and libraries surrounding these different flavours of component, but not that composition is inherently a bad thing. Note: earlier players in the JS framework game (Dojo, YUI, ExtJS) touted composition strongly and it’s been around forever but it’s taken us a while for most people to grok the true power of this model as broadly on the front-end.</p><p name="aedd" id="aedd" class="graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Composition is one solution to the problem of application complexity</strong>. Now, the way that languages in the web platform evolve are in direct response to the pain caused by such complexity. Complexity on its own can take lots of forms, but when we look at the landscape of how developers have been building for the web over the last few years, common patterns can be one the most obvious things worth considering baking in solutions for. This is why an acknowledgement by browser vendors that Web Components are important is actually a big deal. Even if you absolutely don’t use ‘our’ flavour of them (I’ll contest they are powerful), hopefully you dig composition enough to use a solution that offers it.</p><p name="c397" id="c397" class="graf--p graf-after--p">Where I hope we’ll see improvements in the future are around state synchronisation (synchronising state between your components DOM and your model/server) and utilising the power of composition boundaries.</p><h4 name="84fd" id="84fd" class="graf--h4 graf-after--p">Composition Boundaries</h4><p name="8885" id="8885" class="graf--p graf-after--h4">It would be unfair to talk about composition on the web without also discussing <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/" data-href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/" class="markup--anchor markup--p-anchor" rel="nofollow">Shadow DOM</a> boundaries (humour me). It’s best to think about the feature as giving us true functional boundaries between widgets we’ve composed using regular old HTML. This lets us understand where one widget tree ends and another widget’s tree begins, giving us a chance to stop shit from a single widget leaking all over the page. It also allows us to scope down what CSS selectors can match such that deep widget structures can hide elements from expensive styling rules.</p><figure name="222f" id="222f" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 478px;"><div class="aspect-ratio-fill" style="padding-bottom: 68.30000000000001%;"></div><img class="graf-image" data-image-id="1*8wTmS1mjdJ6EaaFPWkYNhg.png" data-width="2367" data-height="1617" data-action="zoom" data-action-value="1*8wTmS1mjdJ6EaaFPWkYNhg.png" src="https://cdn-images-1.medium.com/max/800/1*8wTmS1mjdJ6EaaFPWkYNhg.png"></div><figcaption class="imageCaption">The shadow boundary is the barrier that separates the regular DOM (“light” DOM) from the shadow DOM</figcaption></figure><p name="2bbc" id="2bbc" class="graf--p graf-after--figure">If you haven’t played around with Shadow DOM, it allows a browser to include a subtree of DOM elements (e.g those representing a component) into the rendering of a document, but not into the main document DOM tree of the page. This creates a <strong class="markup--strong markup--p-strong">composition boundary </strong>between one component and the next allowing you to reason about components as small, independent chunks without having to rely on iframes. Browsers with Shadow DOM support can move across this boundary at ease, but inside that subtree of DOM elements you can compose a component using the same div, input and select tags you use today. <strong class="markup--strong markup--p-strong">This also protects the rest of the page from component implementation details hidden away inside the Shadow DOM.</strong></p><p name="5857" id="5857" class="graf--p graf-after--p">How does Shadow DOM compare to just using an iframe, something used since the dawn of time for separating scope and styling? Other than being horrible, iframes were designed to insert completely separate HTML documents into the middle of another, meaning by design, meaning accessing DOM elements existing in an iframe (a completely separate context) was meant to be brittle and non-trivial by default. Also think about ‘inserting’ multiple components into a page with this mechanism. You would hit a separate URL for the iframe host content in each case, littering your markup with unwieldily iframe tags that have little to no semantic value. Components using Shadow DOM for their composition boundaries are (or should be) as straight-forward to consume and modify as native HTML elements.</p><p name="cb69" id="cb69" class="graf--p graf-after--p">Playing Devil’s advocate, some may feel composition shouldn’t happen at the presentation layer (it may not be your cup of tea), others may agree it does. Let’s start off by saying you absolutely can have component composition without the use of Shadow DOM, however in order to achieve it, you end up having to be extremely disciplined about the boundaries of your components or add additional abstractions to make that happen. Shadow DOM gives you a way of doing this as a platform abstraction.</p><p name="7bd9" id="7bd9" class="graf--p graf-after--p">Whilst this is natively in Chrome and coming to other browsers in <a href="https://hacks.mozilla.org/2014/12/mozilla-and-web-components/" data-href="https://hacks.mozilla.org/2014/12/mozilla-and-web-components/" class="markup--anchor markup--p-anchor" rel="nofollow">future</a>, it’s exciting to see existing approaches exploring support for it — e.g React are exploring <a href="https://twitter.com/addyosmani/status/542775855190376448" data-href="https://twitter.com/addyosmani/status/542775855190376448" class="markup--anchor markup--p-anchor" rel="nofollow">adding</a> support for Shadow DOM and hope to evolve this work soon. Polymer already supports it and there appears to be interest from Ember and Angular in exploring this space.</p><h3 name="166b" id="166b" class="graf--h3 graf-after--p">Component messaging</h3><p name="d3cc" id="d3cc" class="graf--p graf-after--h3">What about communicating between components? Well if you’re working with decoupled, modular components there are a few options here.</p><p name="1640" id="1640" class="graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Direct reference via component APIs is undesirable (unless working on something super simple) as this introduces direct dependencies on specific versions of other components.</strong> If their APIs vastly change, you either have to pay the upgrade price or deal with breakage. Instead, you could use a classic global or in-component event system. If you require communication between components without a parent-child relationship, events + subscription remain a popular way option. In fact, React recommends this approach, unless components do have a parent-child relationships in which case just pass <a href="http://facebook.github.io/react/tips/communicate-between-components.html" data-href="http://facebook.github.io/react/tips/communicate-between-components.html" class="markup--anchor markup--p-anchor" rel="nofollow">props</a>. Angular uses Services for component communication and Polymer has a few options here: custom events, change watchers and the `&lt;core-signals&gt;` element.</p><p name="49c6" id="49c6" class="graf--p graf-after--p">Is this the best we can do? Absolutely not. <strong class="markup--strong markup--p-strong">For events you’re going to fire-and-forget, the global event system model works relatively well but it becomes hairy once you start to need stateful events or chaining</strong>. As complexity grows, you may find that events interweave communication and flow control. Whilst there are many ways to improve your event system (e.g functional reactive programming) you may find yourself with events running arbitrarily large amounts of code.</p><p name="8546" id="8546" class="graf--p graf-after--p"><strong class="markup--strong markup--p-strong">What might be better than a global event system is </strong><a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes" data-href="http://en.wikipedia.org/wiki/Communicating_sequential_processes" class="markup--anchor markup--p-anchor" rel="nofollow"><strong class="markup--strong markup--p-strong">CSP</strong></a> (Communicating Sequential Processes), a formalised way to describe communication in concurrent systems. CSP channels can be found in ClojureScript or Go and have been formalised in the <a href="https://github.com/clojure/core.async/" data-href="https://github.com/clojure/core.async/" class="markup--anchor markup--p-anchor" rel="nofollow">core.async</a> project. CSP (not to be confused with Content Security Policy) handles coordination of your processes using message passing, blocking execution when consuming or putting from channels, making it easier to express complex async flows. The issue they solve is at some point, you may require duplex channels and rely on a stringly-typed conventional way of doing this:</p><blockquote name="baf1" id="baf1" class="graf--blockquote graf-after--p">thingNeedsPhoto { id: 001, uuid: “foo” }<br>thingPhoto { data: “../photo.png”, uuid: “foo” }</blockquote><p name="6308" id="6308" class="graf--p graf-after--blockquote">Later matching the two together. You’ve now mostly re-implemented function calls on top of a lossy, unoptimized event channel. Whenever there’s a mis-match because of a typo debugging is going to be a pain.</p></div><div class="section-inner sectionLayout--outsetColumn"><figure name="61f3" id="61f3" class="graf--figure graf--layoutOutsetCenter graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 1020px; max-height: 608px;"><div class="aspect-ratio-fill" style="padding-bottom: 59.599999999999994%;"></div><img class="graf-image" data-image-id="1*tdy1UQP2PIXjE7GtxHXwRA.png" data-width="1855" data-height="1106" data-action="zoom" data-action-value="1*tdy1UQP2PIXjE7GtxHXwRA.png" src="https://cdn-images-1.medium.com/max/1200/1*tdy1UQP2PIXjE7GtxHXwRA.png"></div></figure></div><div class="section-inner layoutSingleColumn"><p name="d4be" id="d4be" class="graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">Mechanisms derived from CSP provide abstractions for pieces of work to control other pieces of work. With primitives like this, it’s easier to build cooperative mechanisms for concurrency. </strong>CSP gives you a relatively low-level set of constructs. In Functional Reactive Programming, signals represent values that change over time. Signals have a push-based interface, which is why it’s reactive. FRP provides a purely functional interface so you don’t emit events, but you do have control flow structures allowing you to define transformations over base signals. Signals in FRP can be implemented using CSP channels.</p><p name="57ea" id="57ea" class="graf--p graf-after--p"><a href="http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript" data-href="http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript" class="markup--anchor markup--p-anchor" rel="nofollow">James Long</a> and <a href="http://phuu.net/2014/08/31/csp-and-transducers.html" data-href="http://phuu.net/2014/08/31/csp-and-transducers.html" class="markup--anchor markup--p-anchor" rel="nofollow">Tom Ashworth</a> have some rock solid posts on CSP and Transducers (composable algorithmic transformations) are worth looking at if you find yourself wanting more than a global event system.</p><p name="53c4" id="53c4" class="graf--p graf-after--p">Also, do check out the <a href="https://github.com/ubolonton/js-csp" data-href="https://github.com/ubolonton/js-csp" class="markup--anchor markup--p-anchor" rel="nofollow"><strong class="markup--strong markup--p-strong">js-csp</strong></a> project which offers a close JavaScript port of ClojureScript’s core.async that implemented Inversion-Of-Control (IOC) encapsulation using Generators (yield statements) rather than macros.</p><h3 name="f0de" id="f0de" class="graf--h3 graf-after--p">ES6 &amp; Browserify</h3><p name="4ea2" id="4ea2" class="graf--p graf-after--h3">I’ve written in the past about the net gains of large-scale systems that take advantage of decoupling and a sane approach to JavaScript ‘modules’. I consider us in a far far better position now than we were a few years ago, no longer just making do with AMD, RequireJS and the Module pattern.</p><p name="9601" id="9601" class="graf--p graf-after--p">We can thank the abundance of increasingly reliable tooling around Browserify (there’s an <a href="http://browserifysearch.org/" data-href="http://browserifysearch.org/" class="markup--anchor markup--p-anchor" rel="nofollow"><em class="markup--em markup--p-em">entire</em> set</a> of npm modules that are browserifiable) or a plethora of <a href="https://github.com/addyosmani/es6-tools#transpilers" data-href="https://github.com/addyosmani/es6-tools#transpilers" class="markup--anchor markup--p-anchor" rel="nofollow">transpilation-friendly</a> ES6 features; super-useful while we wait for <a href="http://www.2ality.com/2014/09/es6-modules-final.html" data-href="http://www.2ality.com/2014/09/es6-modules-final.html" class="markup--anchor markup--p-anchor" rel="nofollow">ES6 Modules</a> to eventually ship in browsers.</p><figure name="fd36" id="fd36" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 497px;"><div class="aspect-ratio-fill" style="padding-bottom: 71%;"></div><img class="graf-image" data-image-id="1*tNh8NTBrl74k06Id07Wggw.png" data-width="2010" data-height="1428" data-action="zoom" data-action-value="1*tNh8NTBrl74k06Id07Wggw.png" src="https://cdn-images-1.medium.com/max/800/1*tNh8NTBrl74k06Id07Wggw.png"></div><figcaption class="imageCaption">es6ify by <a href="http://twitter.com/thlorenz" data-href="http://twitter.com/thlorenz" class="markup--anchor markup--figure-anchor" title="Twitter profile for @thlorenz" rel="nofollow">@thlorenz</a> and <a href="http://twitter.com/domenic" data-href="http://twitter.com/domenic" class="markup--anchor markup--figure-anchor" title="Twitter profile for @domenic" rel="nofollow">@domenic</a> result in a relatively nice pipeline for working with ES5 &amp; ES6 with full support for source maps.</figcaption></figure><p name="1969" id="1969" class="graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">In many cases we’ve moved beyond this and it’s almost passe to frown at someone using a build-step in their authoring workflow. </strong><a href="https://github.com/sindresorhus/esnext-showcase" data-href="https://github.com/sindresorhus/esnext-showcase" class="markup--anchor markup--p-anchor" rel="nofollow">Plenty</a> of JS library authors are similarly happy to use ES6 for their pre-built source.</p><p name="856d" id="856d" class="graf--p graf-after--p"><strong class="markup--strong markup--p-strong">ES6 Modules solve a plethora of issues we’ve faced in dependency and deployment, allowing us to create modules with explicit exports, import named exports from those modules and keep their names separate.</strong> They’re something of a combination between the asynchronous nature of AMD (needed in the browser) and the clarity of code you find in CommonJS, also handling circular dependencies in a better fashion.</p><p name="1a49" id="1a49" class="graf--p graf-after--p">With deps in ES6 modules being static we have a statically analyzable dependency graph which is hugely useful. They’re also significantly more clean than using CommonJS (despite Browserify workflows making it pretty pleasant to use). In order to support CommonJS in the browser context, you either wrap the module or XHR it in, wrap yourself and eval. Whilst this allows it to work in browsers, ES6 modules support both web and server use-cases more cleanly as they were designed from the bottom-up to support both.</p><p name="bd66" id="bd66" class="graf--p graf-after--p">On the native front, I’ve also been excited to see support for ES6 primitives continue to be natively explored in V8, Chakra, SpiderMonkey, and JSC. Perhaps the biggest surprise for me was IE Tech Preview shooting up to 32/44 on the <a href="http://kangax.github.io/compat-table/es6/" data-href="http://kangax.github.io/compat-table/es6/" class="markup--anchor markup--p-anchor" rel="nofollow">ES6 compat table</a> ahead of everyone else:</p><figure name="e6a5" id="e6a5" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 449px;"><div class="aspect-ratio-fill" style="padding-bottom: 64.2%;"></div><img class="graf-image" data-image-id="1*mWPAXNkZmc5gjGU-rKNung.png" data-width="1024" data-height="657" data-action="zoom" data-action-value="1*mWPAXNkZmc5gjGU-rKNung.png" src="https://cdn-images-1.medium.com/max/800/1*mWPAXNkZmc5gjGU-rKNung.png"></div><figcaption class="imageCaption">IE Tech Preview already has support for ES6 Classes, for…of, Maps, Sets, typed arrays, Array.prototype methods and many other features.</figcaption></figure><p name="14dd" id="14dd" class="graf--p graf-after--figure">In case you’ve missed the V8 progress updates I’ve been posting, here are a few reminders:</p><p name="6126" id="6126" class="graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Template Strings/Literals with embedded expressions enabling easier string interpolation:</strong></p><figure name="e5fc" id="e5fc" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 553px;"><div class="aspect-ratio-fill" style="padding-bottom: 79%;"></div><img class="graf-image" data-image-id="1*_WC8llYhsfJsfvAAmDAKcg.png" data-width="1260" data-height="996" data-action="zoom" data-action-value="1*_WC8llYhsfJsfvAAmDAKcg.png" src="https://cdn-images-1.medium.com/max/800/1*_WC8llYhsfJsfvAAmDAKcg.png"></div></figure><p name="5c94" id="5c94" class="graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">Object Literal Extensions. Shorthand properties and methods will help us save keystrokes:</strong></p><figure name="0782" id="0782" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 798px;"><div class="aspect-ratio-fill" style="padding-bottom: 113.99999999999999%;"></div><img class="graf-image" data-image-id="1*tQT637o53hR239FRXkwJvg.png" data-width="1024" data-height="1167" data-action="zoom" data-action-value="1*tQT637o53hR239FRXkwJvg.png" src="https://cdn-images-1.medium.com/max/800/1*tQT637o53hR239FRXkwJvg.png"></div></figure><p name="df59" id="df59" class="graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">ES6 Classes bringing syntactical sugar over today’s objects and prototypes:</strong></p><figure name="44bb" id="44bb" class="graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 762px;"><div class="aspect-ratio-fill" style="padding-bottom: 108.80000000000001%;"></div><img class="graf-image" data-image-id="1*HXf8FBnCOaKtURSu6a0oag.png" data-width="1428" data-height="1554" data-action="zoom" data-action-value="1*HXf8FBnCOaKtURSu6a0oag.png" src="https://cdn-images-1.medium.com/max/800/1*HXf8FBnCOaKtURSu6a0oag.png"></div></figure><p name="57e0" id="57e0" class="graf--p graf-after--figure">Whether it’s ES6 features or CommonJS modules we have sufficient tooling to gift our projects with strong compositions whether they’re client or server-side, isomorphic or otherwise. That’s kind of amazing. Don’t get me wrong, we have a long road ahead towards maturing the quality of our ecosystems but our composition story for the front-end is strong today.</p><p name="17e2" id="17e2" class="graf--p graf-after--p">Side: As we’ve already talked about Web Components, <a href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/" data-href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/" class="markup--anchor markup--p-anchor" rel="nofollow">HTML Imports</a> are worth a mention here too. JavaScript modules <em class="markup--em markup--p-em">may not</em> always be the best <strong class="markup--strong markup--p-strong">container format</strong> for components &amp; their corresponding templates — a lot of people still use additional tooling to load and parse them.</p><p name="8875" id="8875" class="graf--p graf-after--p">There’s an argument to be made that as we as JS developers have an existing and somewhat mature ecosystem of tooling around scripts, moving back to HTML and having to rewrite tools to support it as a dependency mechanism can feel backwards. I see this problem in-part <strong class="markup--strong markup--p-strong">solved </strong>with tools like <a href="https://www.polymer-project.org/articles/concatenating-web-components.html" data-href="https://www.polymer-project.org/articles/concatenating-web-components.html" class="markup--anchor markup--p-anchor" rel="nofollow">Vulcanize</a> (for flattening imports) and hopefully going away with HTTP2.</p><p name="15c5" id="15c5" class="graf--p graf-after--p">I’m personally conflicted about how much machinery should go in pure script vs. an import and where the lines draw when we start to look at ES6 module interop. That said, HTML imports are a nice way to both package component resources but always loads scripts without blocking the parser (they still block the load event). I remain hopeful that we’ll see usage of imports, modules and interop of both systems evolve in the future.</p><h3 name="2749" id="2749" class="graf--h3 graf-after--p">The Offline Problem</h3><p name="ddf0" id="ddf0" class="graf--p graf-after--h3"><strong class="markup--strong markup--p-strong">We don’t really have a true mobile web experience if our applications don’t work offline.</strong></p><p name="0a15" id="0a15" class="graf--p graf-after--p">There have been fundamental challenges in achieving this in the past, but things are getting better. This year, APIs in the web platform have continued to evolve in a direction giving us better primitives, most interestingly of late, <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API/Using_Service_Workers" data-href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API/Using_Service_Workers" class="markup--anchor markup--p-anchor" rel="nofollow">Service Workers</a>. Service Workers are an API allowing us to make sites work offline through intercepting network requests and programmatically telling the browser what to do with these requests.</p><figure name="17ba" id="17ba" class="graf--figure graf--layoutInsetLeft graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 350px; max-height: 635px;"><div class="aspect-ratio-fill" style="padding-bottom: 181.5%;"></div><img class="graf-image" data-image-id="1*x0SAVPw0NR1Efq_Y__hqsA.png" data-width="820" data-height="1488" data-action="zoom" data-action-value="1*x0SAVPw0NR1Efq_Y__hqsA.png" src="https://cdn-images-1.medium.com/max/400/1*x0SAVPw0NR1Efq_Y__hqsA.png"></div><figcaption class="imageCaption">Service Worker enabling an offline experience for the Chrome Dev Summit site. This feature is available in Chrome 40 beta and above.</figcaption></figure><p name="510a" id="510a" class="graf--p graf-after--figure">They’re what AppCache should have been, except with the right level of control. We can cache content, modify what is served and treat the network like an enhancement. You can learn more about Service Worker through Matt Gaunt’s excellent <a href="http://www.html5rocks.com/en/tutorials/service-worker/introduction/" data-href="http://www.html5rocks.com/en/tutorials/service-worker/introduction/" class="markup--anchor markup--p-anchor" rel="nofollow">Service Worker primer</a> or Jake Archibald’s masterful <a href="http://jakearchibald.com/2014/offline-cookbook/" data-href="http://jakearchibald.com/2014/offline-cookbook/" class="markup--anchor markup--p-anchor" rel="nofollow">offline patterns</a> article.</p><p name="07ee" id="07ee" class="graf--p graf-after--p">In 2015, I would like to see us evolve more routing and state-management libraries to be built on top of Service Workers. First-class offline and syncronization support for any routes you’ve navigated to would be huge, especially if developers can get them for next to free.</p><figure name="f605" id="f605" class="graf--figure graf--layoutInsetLeft graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 350px; max-height: 176px;"><div class="aspect-ratio-fill" style="padding-bottom: 50.4%;"></div><img class="graf-image" data-image-id="1*YiLL1pNOixlZ2nN7xBp6AA.jpeg" data-width="1080" data-height="544" data-action="zoom" data-action-value="1*YiLL1pNOixlZ2nN7xBp6AA.jpeg" src="https://cdn-images-1.medium.com/max/400/1*YiLL1pNOixlZ2nN7xBp6AA.jpeg"></div><figcaption class="imageCaption">Sneak peek of the Push API working in Chrome for Android.</figcaption></figure><p name="84cb" id="84cb" class="graf--p graf-after--figure">This would help us offer significant performance improvements for repeat visits through cached views and assets. Service Workers are also somewhat of a bedrock API and request control is only the first of a plethora of new functionality we may get on top of them, including <a href="https://w3c.github.io/push-api/" data-href="https://w3c.github.io/push-api/" class="markup--anchor markup--p-anchor" rel="nofollow">Push Notifications</a> and <a href="https://github.com/slightlyoff/BackgroundSync" data-href="https://github.com/slightlyoff/BackgroundSync" class="markup--anchor markup--p-anchor" rel="nofollow">Background Syncronization</a>.</p><p name="7e57" id="7e57" class="graf--p graf-after--p">To learn more about how to use Push Notifications in Chrome today, read <a href="https://gauntface.com/blog/2014/12/15/push-notifications-service-worker" data-href="https://gauntface.com/blog/2014/12/15/push-notifications-service-worker" class="markup--anchor markup--p-anchor" rel="nofollow">Push Notifications &amp; Service Worker</a> by Matt Gaunt.</p><h3 name="b953" id="b953" class="graf--h3 graf-after--p">Component APIs and Facades</h3><p name="daf9" id="daf9" class="graf--p graf-after--h3">One could argue that the “facade pattern” I’ve touched on in <a href="http://addyosmani.com/largescalejavascript/" data-href="http://addyosmani.com/largescalejavascript/" class="markup--anchor markup--p-anchor" rel="nofollow">previous</a> literature is still viable today, especially if you don’t allow the implementation details of your component leak into its public API. If you are able to define a clean, robust interface to your component, consumers of it can continue to utilize said components without worrying about the implementation details . Those can change at any time with minimal breakage.</p><p name="3db4" id="3db4" class="graf--p graf-after--p">An addendum to this could be that this is a good model for framework and library authors to follow for public components they ship. While this is absolutely not tied to Web Components, I’ve enjoyed seeing the Polymer paper-* elements evolve over time with the machinery behind the scenes having minimal impact to public component APIs. This is inherently good for users. Try not to violate the principle of least astonishment i.e the users of your component API shouldn’t be surprised by behaviour. Hold this true and you’ll have happier users and a happier team.</p><h3 name="55d8" id="55d8" class="graf--h3 graf-after--p">Immutable &amp; persistent data structures</h3><p name="25cc" id="25cc" class="graf--p graf-after--h3">In previous write-ups on large-scale JS, I haven’t really touched on immutability or persistent data structures. If you’ve crossed paths with libraries like <a href="https://github.com/facebook/immutable-js" data-href="https://github.com/facebook/immutable-js" class="markup--anchor markup--p-anchor" rel="nofollow">immutable-js</a> or <a href="http://swannodette.github.io/mori/" data-href="http://swannodette.github.io/mori/" class="markup--anchor markup--p-anchor" rel="nofollow">Mori</a> and been unclear on where their value lies, a quick primer may be useful.</p><p name="c94f" id="c94f" class="graf--p graf-after--p">An <strong class="markup--strong markup--p-strong">immutable</strong> data structure is one that can’t be modified after it has been created, meaning the way to efficiently modify it would be making a mutable copy. A <strong class="markup--strong markup--p-strong">persistent</strong> data structure is one which preserves the previous versions of itself when changed. Data structures like this are immutable (their state cannot be modified once created). Mutations don’t update the in-place structure, but rather generate a new updated structure. Anything pointing to the original structure has a guarantee it won’t ever change.</p><blockquote name="5ae7" id="5ae7" class="graf--blockquote graf-after--p"><strong class="markup--strong markup--blockquote-strong">The real benefit behind persistent data structures is referential equality so it’s clear by comparing the address in memory, you have not only the same object but also the same data ~ </strong>Pascal Hartig, Twitter.</blockquote><p name="1d47" id="1d47" class="graf--p graf-after--blockquote">Let’s try to rationalize immutable data structures in the form of a Todo app. Imagine in our app we have a normal JS array for our Todo items. There’s a reference to this array in memory and it has a specific value. A user then adds a new Todo item, changing the array. The array has now been mutated. In JavaScript, the in-memory reference to this array doesn’t change, but the value of what it is pointing to has.</p><p name="c27a" id="c27a" class="graf--p graf-after--p">For us to know if the value of our array has changed, we need to perform a comparison on each element in the array — an expensive operation. Let’s imagine that instead of a vanilla array, we have an immutable one. This could be created with immutable-js from Facebook or Mori. Modifying an item in the array, we get back a new array and a new array reference in memory.</p><p name="e01d" id="e01d" class="graf--p graf-after--p">If we were to go back and check the reference to our array in memory is the same, it’s guaranteed not to have changed. The value will be the same. This enables all kinds of things, like fast and efficient equality checking. As you’re only checking the reference rather than every value in the Todos array the operation is cheaper.</p><p name="f478" id="f478" class="graf--p graf-after--p">As mentioned, immutability should allow us to guarantee a data structure (e.g Todos) hasn’t been tampered. For example (rough code):</p><blockquote name="577e" id="577e" class="graf--blockquote graf-after--p">var todos = [‘Item 1&#39;, ‘Item 2&#39;, ‘Item 3&#39;];<br>updateTodos(todos, newItem);<br>destructiveOpOnTodos(todos);<br>console.assert(todos.length === 3);</blockquote><p name="4f66" id="4f66" class="graf--p graf-after--blockquote">At the point we hit the assertion, it’s guaranteed that none of the ops since array creation have mutated it. This probably isn’t a huge deal if you’re strict about changing data structures, but this updates the guarantee from a “maybe” to a “definitely”.</p><p name="19e6" id="19e6" class="graf--p graf-after--p">I’ve previously walked through implementing an Undo stack using existing platform tech like Mutation Observers. If you’re working on a system using this, there’s a linear increase involved in the cost of memory usage. With persistent data structures, that memory usage can potentially be much smaller if your undo stack uses structural sharing.</p><p name="1aac" id="1aac" class="graf--p graf-after--p">Immutability comes with a number of benefits, including:</p><ul class="postList"><li name="8508" id="8508" class="graf--li graf-after--p">Typically destructive updates like adding, appending or removing on objects belonging to others can be performed without unwanted side-effects.</li><li name="dbc3" id="dbc3" class="graf--li graf-after--li">You can treat updates like expressions as each change generates a value.<br>You get the ability to pass objects as arguments to functions and not worry about those functions mutating the object.</li><li name="c870" id="c870" class="graf--li graf-after--li">These benefits can be helpful for writing web apps, but it’s also possible to live without them as well and many have.</li></ul><p name="60c6" id="60c6" class="graf--p graf-after--li">How does immutability relate to things like React? Well, let’s talk about application state. If state is represented by a data structure that is immutable, it is possible to check for reference equality right when making a call on re-rendering the app (or individual components). If the in-memory reference is equal, you’re pretty much guaranteed data behind the app or component hasn’t been changed. This allows you to bail and tell React that it doesn’t need to re-render.</p><p name="ddad" id="ddad" class="graf--p graf-after--p">What about Object.freeze? Where you to read through the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" class="markup--anchor markup--p-anchor" rel="nofollow">MDN description</a> of Object.freeze(), you might be curious as to why additional libraries are still required to solve the issue of immutability. Object.freeze() freezes an object, preventing new properties from being added to it, existing properties from being removed and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. Great, so...why isn’t this enough?</p><p name="a8f5" id="a8f5" class="graf--p graf-after--p">Well, you technically could use Object.freeze() to achieve immutability, however, the moment you need to modify those immutable objects you will need to perform a deep copy of the entire object, mutate the copy and then freeze it. This is often too slow to be of practical use in most use-cases. This is really where solutions like immutable-js and mori shine. They also don’t just assist with immutability — they make it more pleasant to work with persistent data structures if you care about avoiding destructive updates.</p><h4 name="d442" id="d442" class="graf--h4 graf-after--p">Are they worth the effort?</h4><p name="6ed7" id="6ed7" class="graf--p graf-after--h4"><strong class="markup--strong markup--p-strong">Immutable data structures (for some use-cases) make it easier to avoid thinking about the side-effects of your code. If working on a component or app where the underlying data may be changed by another entity, you don’t really have to worry if your data structures are immutable</strong>. Perhaps the main downside to immutability are the memory performance drawbacks, but again, this really depends on whether the objects you’re working with contain lots of data or not.</p><h3 name="a4c7" id="a4c7" class="graf--h3 graf-after--p">We have a long way to go yet</h3><p name="5600" id="5600" class="graf--p graf-after--h3">Beyond an agreement that composition is fundamentally good, we still disagree on a lot. Separation of concerns. Data-flow. Structure. The necessity for immutable data structures. Data-binding (two-way isn’t always better than one-way binding and depends on how you wish to model mutable state for your components). The correct level of magic for our abstractions. The right place to solve issues with our rendering pipelines (native vs. virtual diffing). How to hit 60fps in our user-interfaces. Templating (yes, we’re still not all using the template tag yet).</p><h3 name="2155" id="2155" class="graf--h3 graf-after--p">Onward and upward</h3><p name="a82f" id="a82f" class="graf--p graf-after--h3">Ultimately how you ‘solve’ these problems today comes down to asking yourself three questions:</p><p name="275d" id="275d" class="graf--p graf-after--p">1. Are you happy delegating such decisions and choices to an opinionated framework?<br>2. Are you happy ‘composing’ solutions to these problems using existing modules?<br>3. Are you happy crafting (from scratch) the architecture and pieces that solve these problems on your own?</p><p name="863b" id="863b" class="graf--p graf-after--p">I’m an idiot, still haven’t ‘figured’ this all out and am still learning as I go along. With that, please feel free to share your thoughts on the future of application architecture, whether there is more needed on the platform side, in patterns or in frameworks. If my take on any of the problems in this space is flawed (it may well be), please feel free to correct me or suggest more articles for my holiday reading list below:</p><ul class="postList"><li name="da2e" id="da2e" class="graf--li graf-after--p"><a href="http://jakearchibald.com/2014/offline-cookbook/" data-href="http://jakearchibald.com/2014/offline-cookbook/" class="markup--anchor markup--li-anchor" rel="nofollow">The Offline Cookbook</a></li><li name="a233" id="a233" class="graf--li graf-after--li"><a href="https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c" data-href="https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c" class="markup--anchor markup--li-anchor" rel="nofollow">Why it’s ridiculous to say ‘generators solve async’</a></li><li name="a67c" id="a67c" class="graf--li graf-after--li"><a href="http://phuu.net/2014/08/31/csp-and-transducers.html" data-href="http://phuu.net/2014/08/31/csp-and-transducers.html" class="markup--anchor markup--li-anchor" rel="nofollow">CSP and Transducers in JavaScript</a></li><li name="b337" id="b337" class="graf--li graf-after--li"><a href="http://www.usingcsp.com/cspbook.pdf" data-href="http://www.usingcsp.com/cspbook.pdf" class="markup--anchor markup--li-anchor" rel="nofollow">Communicating Sequential Processes — Hoare</a></li><li name="9817" id="9817" class="graf--li graf-after--li"><a href="http://jlongster.com/Transducers.js-Round-2-with-Benchmarks" data-href="http://jlongster.com/Transducers.js-Round-2-with-Benchmarks" class="markup--anchor markup--li-anchor" rel="nofollow">Transducers and benchmarks</a></li><li name="c59f" id="c59f" class="graf--li graf-after--li"><a href="https://github.com/nevir/html-exports" data-href="https://github.com/nevir/html-exports" class="markup--anchor markup--li-anchor" rel="nofollow">HTML Exports — Importing HTML via ES6 Modules</a></li><li name="2829" id="2829" class="graf--li graf-after--li"><a href="https://medium.com/@garychambers108/flux-in-practice-ec08daa9041a" data-href="https://medium.com/@garychambers108/flux-in-practice-ec08daa9041a" class="markup--anchor markup--li-anchor">Flux in Practice</a></li><li name="b653" id="b653" class="graf--li graf-after--li"><a href="http://guybedford.com/practical-workflows-for-es6-modules" data-href="http://guybedford.com/practical-workflows-for-es6-modules" class="markup--anchor markup--li-anchor" rel="nofollow">Practical Workflows for ES6 Modules</a></li><li name="a9c7" id="a9c7" class="graf--li graf-after--li"><a href="http://www.mattgreer.org/articles/traceur-gulp-browserify-es6/" data-href="http://www.mattgreer.org/articles/traceur-gulp-browserify-es6/" class="markup--anchor markup--li-anchor" rel="nofollow">Traceur, Gulp, Browserify and ES6</a></li><li name="688e" id="688e" class="graf--li graf-after--li"><a href="http://awardwinningfjords.com/2014/04/21/functional-programming-in-javascript-equals-garbage.html" data-href="http://awardwinningfjords.com/2014/04/21/functional-programming-in-javascript-equals-garbage.html" class="markup--anchor markup--li-anchor" rel="nofollow">Functional Programming in Javascript === Garbage</a></li></ul><p name="78b2" id="78b2" class="graf--p graf-after--li"><em class="markup--em markup--p-em">Note: You’ll notice a lack of content here around Web Components. As my work with Chrome covers articles written on </em><a href="http://webcomponents.org/polyfills/" data-href="http://webcomponents.org/polyfills/" class="markup--anchor markup--p-anchor" rel="nofollow"><em class="markup--em markup--p-em">Web Components primitives</em></a><em class="markup--em markup--p-em"> and </em><a href="https://www.polymer-project.org/articles/" data-href="https://www.polymer-project.org/articles/" class="markup--anchor markup--p-anchor" rel="nofollow"><em class="markup--em markup--p-em">Polymer</em></a><em class="markup--em markup--p-em">, I feel sufficiently coverered (maybe not!), but am always open to new explorations around these topics if folks have links to share.</em></p><p name="7e14" id="7e14" class="graf--p graf-after--p graf--last">I’m particularly interested in how we bridge the gaps between Web Components and Virtual-DOM diffing approaches, where we see component messaging patterns evolving here and what you feel the web is still missing for application authors.</p></div></div></section></main><footer class="postArticle-footer"><div class="postActionsFooter container u-size740"><div class="row"><div class="col u-xs-size12of12"><div class="postMeta-inlineAcknowledgments"><span class="postMeta-acknowledgment"><span data-tooltip="The following people helped the author by providing feedback before the story was published.">Thanks to</span> <span><a class="link"  href="https://medium.com/@passy" data-action="show-user-card" data-action-type="hover" data-user-id="19026c4fef9d" dir="auto">Pascal Hartig</a></span>.</span> </div></div></div><div class="row"><div class="col u-xs-size12of12 js-postTags"><div class="postTags"><div class="tags tags--postTags tags--borderless"></div></div></div></div><div class="row js-postActionsFooter"><div class="postActions col u-xs-size12of12"><div class="u-floatLeft buttonSet buttonSet--withLabels"><div class="buttonSet-inner"><div class="js-actionRecommend" data-post-id="d8125811101b" data-size="29px"><button class="button button--primary button--large button--chromeless button--withIcon button--withSvgIcon"  title="Recommend to share this article with your followers and let the author know you liked it" aria-label="Recommend to share this article with your followers and let the author know you liked it"data-action="sign-in-prompt" data-sign-in-action="upvote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/d8125811101b"><span class="button-defaultState"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--heart svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-heart-29px-p0"></use></svg></span><span class="button-activeState"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--heartFilled svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-heartFilled-29px-p0"></use></svg></span></button><button class="button button--chromeless"  data-action="show-recommends" data-action-value="d8125811101b">990</button></div></div><div class="buttonSet-inner"><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="scroll-to-responses"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--response svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-response-29px-p0"></use></svg></button><button class="button button--chromeless"  data-action="scroll-to-responses">3</button></div></div><div class="u-floatRight buttonSet buttonSet--narrow"><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="share-on-twitter"value="d8125811101b"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--twitter svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-twitter-29px-p0"></use></svg></button><button class="button button--large button--dark button--chromeless button--withIcon button--withSvgIcon"  data-action="share-on-facebook"value="d8125811101b"><svg viewBox="0 0 29 29" width="29" height="29" class="svgIcon svgIcon--facebook svgIcon-size--29px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-facebook-29px-p0"></use></svg></button><button class="button button--large button--dark button--chromeless button--withIcon js-moreActionsButton button--withSvgIcon"  title="More actions" aria-label="More actions" data-action="more-actions"><svg viewBox="0 0 25 25" width="25" height="25" class="svgIcon svgIcon--more svgIcon-size--25px"><use class="svgIcon-use svgIcon-use--part0" xlink:href="#svg-more-25px-p0"></use></svg></button></div></div></div></div><div class="container u-size740"><div class="row postFooter-info2"><div class="col u-xs-size12of12"><hr class="postFooter-infoDivider"></div></div><div class="row js-postFooterInfo"><div class="col u-xs-size12of12 u-sm-size6of12"><li class="card card-user"><div class="u-floatRight"><span class="followState js-followState buttonSet-inner" data-user-id="2508e4c7a8ec"><button class="button button--small u-noUserSelect button--withChrome button--withHover button--unblock js-unblockButton" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome button--follow js-followButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/2508e4c7a8ec" data-action-source="footer_card_follow"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span></div><div class="card-imageWrapper "><a class="link avatar"  href="https://medium.com/@addyosmani?source=footer_card" title="Go to the profile of Addy Osmani" aria-label="Go to the profile of Addy Osmani" data-action-source="footer_card" data-user-id="2508e4c7a8ec" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/60/60/0*reRpQxs2HZap9q6V.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Addy Osmani"></a></div><div class="card-content"><h3 class="card-name"><a class="link link--primary"  href="https://medium.com/@addyosmani" property="cc:attributionName" title="Go to the profile of Addy Osmani" aria-label="Go to the profile of Addy Osmani" rel="author cc:attributionUrl" data-user-id="2508e4c7a8ec" dir="auto">Addy Osmani</a></h3><p class="card-description">Staff Engineer at Google working with the Chrome team • Creator of TodoMVC, Yeoman, Material Design Lite, Web Starter Kit • Passionate about web tooling</p></div></li></div><div class="col u-xs-size12of12 u-sm-size6of12 postFooter-collectionCard"><li class="card card-collection"><div class="u-floatRight"><button class="button button--primary button--small u-noUserSelect button--withChrome button--followCollection js-followCollectionButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/google-developers/d8125811101b" data-action-source="footer_card_collection_follow"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></div><div class="card-imageWrapper "><div class="card-imageWrapper "><a class="link avatar avatar--roundedRectangle"  href="https://medium.com/google-developers?source=footer_card" title="Go to Google Developers" aria-label="Go to Google Developers" data-action-source="footer_card"><img src="https://cdn-images-1.medium.com/fit/c/60/60/1*YPxqkb8PlWYBtLLJiPWNbg.png" class="avatar-image u-xs-size60x60" alt="Google Developers"></a></div></div><div class="card-content"><h3 class="card-name"><a class="link link--primary"  href="https://medium.com/google-developers?source=footer_card" title="Go to Google Developers" aria-label="Go to Google Developers" rel="collection" data-action-source="footer_card">Google Developers</a></h3><p class="card-description">Engineering and technology articles for developers, written and curated by Googlers. The views expressed are those of the authors and don’t necessarily reflect those of Google.</p><div class="buttonSet"></div></div></li></div></div></div><div class="responsesWrapper supplementalPostContent js-responsesWrapper"></div><div class="post-footer supplementalPostContent js-readNext"></div></footer></article><div class="promoCardWrapper js-promoCardWrapper"><div class="promoCard"><button class="button button--chromeless button--close"  data-action="popup-dismiss">&times;</button><div class="promoCard-header">Don’t miss Addy Osmani’s next story</div><div class="u-floatRight"><span class="followState js-followState buttonSet-inner" data-user-id="2508e4c7a8ec"><button class="button u-noUserSelect button--withChrome button--withHover button--unblock js-unblockButton" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="user_follow_popup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary u-noUserSelect button--withChrome button--follow js-followButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/2508e4c7a8ec" data-action-source="user_follow_popup_follow"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span></div><div class="avatar"><img src="https://cdn-images-1.medium.com/fit/c/40/40/0*reRpQxs2HZap9q6V.jpeg" class="avatar-image avatar-image--smaller" alt="Addy Osmani"><span class="avatar-text">Addy Osmani</span></div></div></div></div></div></div><div class="loadingBar"></div><script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script><script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.com","bestOfFirstSlug":"may-2013","bestOfLatestSlug":"november-2015","buildLabel":"18659-b02cc8c","currentUser":{"userId":"lo_9733c1bc4e7a","isVerified":"","subscriberEmail":""},"currentUserHasUnverifiedEmail":false,"facebookKey":"542599432471018","facebookScope":["public_profile","email","user_friends"],"isAuthenticated":false,"isCurrentUserVerified":"","loadingPlaceholderImg":"https://cdn-static-1.medium.com/_/fp/img/media-loading-placeholder.b31hiO4ynbDLRrXWEFF4aQ.png","mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/js/main-base.bundle.PMFYxE6gzVH0ZXzyorUr1A.js","notes":"https://cdn-static-1.medium.com/_/fp/js/main-notes.bundle.cyFDLAWmWiJgjmGRZxcrsg.js","posters":"https://cdn-static-1.medium.com/_/fp/js/main-posters.bundle.LweHXgFmA7TsxPWxZy9DVQ.js","common-async":"https://cdn-static-1.medium.com/_/fp/js/main-common-async.bundle.Zlk_NvrG4CMof9DpNoJbBg.js","stats":"https://cdn-static-1.medium.com/_/fp/js/main-stats.bundle.pbXGQaRCi7v3Fb_x6YK8xw.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/js/main-misc-screens.bundle.MSG7F6g6u8wNKQTskHPHXQ.js"},"postColumnWidth":700,"previewConfig":{"weightThreshold":1,"weightEmptyParagraph":0,"weightIframeParagraph":0.8,"weightImageParagraph":0.51,"weightTextParagraph":0.08,"weightBq":0.003,"weightH":0.005,"weightP":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15,"experimentImagesInsetCenter":false,"previewConfigVariantA":{"experimentImagesInsetCenter":true},"previewConfigVariantB":{"weightThreshold":10,"detectTitle":false}},"productName":"Medium","supportsEdit":false,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1449071152039:1316b2c52696","useragent":{"browser":"wget","family":"","os":"","version":1.1,"supportsDesktopEdit":false,"supportsMobileEdit":false,"supportsInteract":false,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":false,"isTier1":false,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":false,"supportsVhUnits":false,"ruinsViewportSections":false,"supportsHtml5Video":false,"supportsMagicUnderlines":false,"isFacebook":false,"isWebView":false,"isFacebookWebView":false,"supportsSvgExternalResources":false,"supportsScrollableMetabar":false,"supportsProgressiveMedia":false,"isGoogle":false},"variants":{"allow_access":true,"allow_signup":true,"can_vote":true,"can_update_settings":true,"can_send_push_notifications":true,"can_export_data":true,"enable_notes":true,"allow_test_auth":"disallow","enable_email_login":true,"enable_email_registration":true,"enable_spam_detection":true,"enable_post_licensing":true,"filter_other_languages":true,"use_experimental_css":true,"can_resume_from_last_read_location":true,"can_report_bad_posts":true,"enable_embeds":true,"enable_recommend_notes":true,"enable_recommend_notes_composition":true,"use_full_width_images":true,"upload_multiple_files":true,"can_follow_users":true,"can_block_users":true,"enable_custom_push_notification_prompts_ios":true,"onboarding_connect_addtional_social_accounts_enabled_ios":true,"allow_request_account_deletion":true,"enable_bookmarks_list_ios":true,"see_featured_post_tab":true,"receive_rec_note_pushes":true,"receive_post_published_pushes":true,"receive_mention_pushes":true,"enable_account_conversion":true,"use_new_scheduled_delivery_flow":true,"feed_homepage":true,"enable_collection_subscription_fanout":true,"welcome_post_url":"https://medium.com/about/about-medium-9eac453da935","google_search":true,"signin_services":"twitter,facebook,google","signup_services":"twitter,facebook,google","mobile_app_promotion":"dialog","enable_bing_search":true,"enable_algolia_search":true,"show_tagged_posts_in_search":true,"enable_respond_to_web":true,"drafts_unauth":true,"friends_only_quotes":true,"enable_search_ios":true,"enable_connect_social_accounts_from_settings_ios":true,"enable_new_cover_flow_ios":true,"enable_rating_prompt":true,"enable_post_show_refactor":true,"enable_your_stories_more_actions":true,"enable_user_search_with_bing":true,"enable_drop_caps":true,"enable_session_cookie_encryption":true,"enable_follow_tags":true,"enable_tabbed_homepage_ios":true,"enable_editors_can_pull_stories":true,"enable_email_capture_flow_ios":true,"enable_send_pub_newsletters":true,"enable_receive_pub_newsletters":true,"enable_new_onboarding_flow_ios":true,"enable_follow_tags_from_post_list_ios":true,"enable_embedded_onboarding_education_and_login_ios":true,"enable_contextual_recommend_education_ios":true,"enable_tag_follow_onboarding":true,"your_top_stories_source":"similar-posts","follower_suggestion_source":"friends-of-friends","enable_query_by_in_response_to_post_id":true,"enable_gif_to_video_ios":true,"enable_international_typographic_quotes_through_icu_ios":true,"enable_service_worker":true,"android_rating_prompt_recommend_threshold":5,"number_of_top_stories":3,"number_of_in_stream_ts4u":3,"number_of_in_stream_global_top_stories":3,"source_of_in_stream_ts4u":"friends-rec-7d","enable_top_stories_in_stream":true,"enable_top_stories_in_stream_on_ios":true,"enable_top_stories_in_stream_on_android":true,"enable_post_recommend_threshold_in_stream":true,"enable_response_recommend_threshold_in_stream":true,"post_recommend_threshold":1,"response_recommend_threshold":2,"new_stream_reasons":true,"google_sign_in_backend":true,"google_sign_in_android":true,"enable_quote_feed_write":true,"enable_pile_on_activity":true,"enable_onboarding":true,"enable_rds_activity":true,"enable_rds_activity_read":true,"enable_activity_rollup":true,"activity_rollup_method":"all","enable_simple_open_in_app":true,"custom_miro_url":"https://cdn-images-1.medium.com","ios_custom_miro_url":"https://cdn-images-1.medium.com","enable_friends_recommends_plugin":true,"enable_write_stats_cache":true,"enable_populate_post_stats":true,"enable_most_recommended_response":true,"no_push_notification_for_responses":true,"receive_follow_pushes":true,"receive_recommend_pushes":true,"receive_response_pushes":true,"receive_highlight_pushes":true,"new_google_flow":true,"enable_small_first_page":true,"enable_response_email2":true,"fetch_with_relation_index":true,"enable_screen_placeholders":true,"user_popover_experiment":true,"enable_post_screen_placeholders":true,"enable_profile_screen_placeholders":true,"reengagement_notification_duration":3,"enable_infinite_scroll_placeholders":true,"enable_context_cards":true,"enable_progressive_media":true,"enable_oauth_api":true,"enable_oauth_token_self_issuance":true,"enable_oauth_app_creation":true,"list_of_lists_bucket":"default","enable_zoomable":true,"use_new_push_notification_logic":true,"enable_send_ios_pushes_using_channel_ids":true,"explore_tab_ios_posts_per_section_limit":4,"enable_quotes_in_one_stream":true,"enable_user_social_count_healing":true,"enable_social_counts_from_user_stat_total":true,"show_social_buttons_on_logged_out_post_footer":true,"enable_preview_footer_two":true,"show_sponsored_read_next":true,"track_with_social_id":true,"filter_responses_in_stream":true,"disable_inherit_tags_inline":true,"sponsored_read_next_cohort":"a"},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","teamName":"Team Medium","fp":{"/img/default-avatar.png":"https://cdn-static-1.medium.com/_/fp/img/default-avatar.dmbNkD5D-u45r44go_cf0g.png","/img/default-preview-image.png":"https://cdn-static-1.medium.com/_/fp/img/default-preview-image.IsBK38jFAJBlWifMLO4z9g.png","/img/email/app_store_badge@2x.png":"https://cdn-static-1.medium.com/_/fp/img/email/app_store_badge@2x.8bDQGNMm-Xs7Hz6WA2XquQ.png","/img/email/app-devices@2x.png":"https://cdn-static-1.medium.com/_/fp/img/email/app-devices@2x.Ewl5-si-nhkLKZFIFSgrOw.png","/img/email/check1.png":"https://cdn-static-1.medium.com/_/fp/img/email/check1.0DM77li7vZhq5o2V9cVYLQ.png","/img/email/check2.png":"https://cdn-static-1.medium.com/_/fp/img/email/check2.GLlNusQmn1hwo9WDN-gE1w.png","/img/email/check3.png":"https://cdn-static-1.medium.com/_/fp/img/email/check3.7VxOUVMXAVbHRRnzMrJ_5A.png","/img/email/email-logo.png":"https://cdn-static-1.medium.com/_/fp/img/email/email-logo.x91rxfZYzIT9OJ5-ySD30A.png","/img/email/fb_logo.png":"https://cdn-static-1.medium.com/_/fp/img/email/fb_logo.Q0M98YwNTu77gLWTK6-RyQ.png","/img/email/google_play_badge@2x.png":"https://cdn-static-1.medium.com/_/fp/img/email/google_play_badge@2x.iWEWlt5_Qj20rr79-IGEBQ.png","/img/email/heart.png":"https://cdn-static-1.medium.com/_/fp/img/email/heart._hlyuYQiuuTWrRmDnDphJA.png","/img/email/heart@2x.png":"https://cdn-static-1.medium.com/_/fp/img/email/heart@2x.qvCTX1XHNpntqxt01oypQw.png","/img/email/heart1.png":"https://cdn-static-1.medium.com/_/fp/img/email/heart1.rnGEmSwcGUhztl_zSU7l6Q.png","/img/email/heart2.png":"https://cdn-static-1.medium.com/_/fp/img/email/heart2.HBiLu3koIYsKjjKroohgbA.png","/img/email/heart3.png":"https://cdn-static-1.medium.com/_/fp/img/email/heart3.AIJBOHw11HuhdClVJNtmtg.png","/img/email/large.png":"https://cdn-static-1.medium.com/_/fp/img/email/large.4EIhZbIk5sgqYSoB4YPmUA.png","/img/email/response.png":"https://cdn-static-1.medium.com/_/fp/img/email/response.5ZuN24N5XqS7ofHKg1lKXw.png","/img/email/response@2x.png":"https://cdn-static-1.medium.com/_/fp/img/email/response@2x.xzKQM4FzSurAVkghLQQWkA.png","/img/email/twitter_logo.png":"https://cdn-static-1.medium.com/_/fp/img/email/twitter_logo.Pz4a3o9WMU5QioxLKcyFhQ.png","/img/email/unlisted.png":"https://cdn-static-1.medium.com/_/fp/img/email/unlisted.ikh8R2LElOz_1YM8A2Db4g.png","/img/email/welcome-heart.png":"https://cdn-static-1.medium.com/_/fp/img/email/welcome-heart.6BRCOGcwGeOCBTql8pbq2g.png","/img/email/welcome-response.png":"https://cdn-static-1.medium.com/_/fp/img/email/welcome-response.iWVQLjiUG5pyQrPyGiYEpw.png","/img/email/welcome-write.png":"https://cdn-static-1.medium.com/_/fp/img/email/welcome-write.afdGsuE6YDk3HkaIASRl0w.png","/img/help/add-media-start.gif":"https://cdn-static-1.medium.com/_/fp/img/help/add-media-start.GXmqQ2Svt1WfZGIZSM93tg.gif","/img/help/add-media.gif":"https://cdn-static-1.medium.com/_/fp/img/help/add-media.SZH2LBmkwVExuhozFfVvYg.gif","/img/help/embed-start.gif":"https://cdn-static-1.medium.com/_/fp/img/help/embed-start.EBJ2PcWFJuYopsQV4wwklA.gif","/img/help/embed.gif":"https://cdn-static-1.medium.com/_/fp/img/help/embed.1BM0Di9vd91Kv8fLioJabw.gif","/img/help/text-highlight-start.gif":"https://cdn-static-1.medium.com/_/fp/img/help/text-highlight-start.AvTbakaFuUCd05YoMECoMQ.gif","/img/help/text-highlight.gif":"https://cdn-static-1.medium.com/_/fp/img/help/text-highlight.XVChoKYZ1-s3gJgHm9-7Yg.gif","/img/help/2.0-astronaut-typing.png":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-astronaut-typing.Ob_pXA84QmY6tATF9JFKIw.png","/img/help/2.0-add-media.gif":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-add-media.LhrJcTFODoqjnPPuHNEInA.gif","/img/help/2.0-add-media-start.png":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-add-media-start.PTVdm36977cSfaYOpMNTNQ.png","/img/help/2.0-highlight-menu.gif":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-highlight-menu.vMoUc7pXOyYFMJX68LXicw.gif","/img/help/2.0-highlight-menu-start.png":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-highlight-menu-start.7vCytTKUZPOZvr_MCYADsA.png","/img/help/2.0-embed.gif":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-embed.2g5jIXYtWjsRFa9D-hBhMQ.gif","/img/help/2.0-embed-start.png":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-embed-start.LGy_FmixvcoEVIDKjg1jwA.png","/img/help/2.0-mention.gif":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-mention.H9pEv0eHAvkGUVqdrHxH5g.gif","/img/help/2.0-mention-start.png":"https://cdn-static-1.medium.com/_/fp/img/help/2.0-mention-start.ShYTOfy6w3VDU9PKFfOEyw.png","/img/help/highlight-tips-1.gif":"https://cdn-static-1.medium.com/_/fp/img/help/highlight-tips-1.dEp02HXMKtAeKxsV5MWqGg.gif","/img/help/highlight-tips-2.gif":"https://cdn-static-1.medium.com/_/fp/img/help/highlight-tips-2.SyXCciYXeNpx4-GUAuh0XQ.gif","/img/import/highlight-menu.png":"https://cdn-static-1.medium.com/_/fp/img/import/highlight-menu.kzoaVM8mJJ-Hu9m9uo3Omg.png","/img/import/image-highlight-menu.png":"https://cdn-static-1.medium.com/_/fp/img/import/image-highlight-menu.q43-H2dl0JvBS_5znQCW8A.png","/img/import/publish-metabar.png":"https://cdn-static-1.medium.com/_/fp/img/import/publish-metabar.YbEX1a2Pu0rAR_LuKeg8JA.png"},"facebookNamespace":"medium-com","authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":true,"algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"aadabda268e3bfaffe7b287709262fec","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","iconsSvgUrl":"/_/proxy-static/_/fp/icons/icons.e14UNvVDeCfX3LDLXV31aw.svg","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","iconsJsUrl":"https://cdn-static-1.medium.com/_/fp/js/icons.ya3M--pc6G6SUWyIzVkfFA.js","favIconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-new.TAS6uQ-Y7kcKgi0xjcYHXw.ico","cssFontUrls":["https://cdn-static-1.medium.com/_/fp/css/fonts-base.LqXl5T9RMAR39Ge23ku50w.css"]},"authBaseUrlRev":"moc.muidem//:sptth"}
// ]]></script><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/main-base.bundle.PMFYxE6gzVH0ZXzyorUr1A.js" async="true"></script><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/icons.ya3M--pc6G6SUWyIzVkfFA.js"></script><script>// <![CDATA[
window["obvInit"]({"value":{"id":"d8125811101b","versionId":"2dec8f81182c","creatorId":"2508e4c7a8ec","creator":{"userId":"2508e4c7a8ec","name":"Addy Osmani","username":"addyosmani","createdAt":1358466215909,"lastPostCreatedAt":1447752256679,"imageId":"0*reRpQxs2HZap9q6V.jpeg","backgroundImageId":"","bio":"Staff Engineer at Google working with the Chrome team • Creator of TodoMVC, Yeoman, Material Design Lite, Web Starter Kit • Passionate about web tooling","twitterScreenName":"addyosmani","socialStats":{"userId":"2508e4c7a8ec","usersFollowedCount":624,"usersFollowedByCount":36706,"type":"SocialStats"},"social":{"userId":"lo_9733c1bc4e7a","targetUserId":"2508e4c7a8ec","type":"Social"},"facebookAccountId":"","type":"User"},"homeCollection":{"id":"2e5ce7f173a5","name":"Google Developers","slug":"google-developers","tags":["DEVELOPERS","GOOGLE"],"creatorId":"991272e72e68","description":"Engineering and technology articles for developers, written and curated by Googlers. The views expressed are those of the authors and don’t necessarily reflect those of Google.","shortDescription":"Engineering and technology articles for developers, written…","image":{"imageId":"1*YPxqkb8PlWYBtLLJiPWNbg.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":7877,"postCount":53,"activeAt":1449006574991},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false},"isSubscribed":false,"isNewsletterSubscribed":false},"logo":{"imageId":"1*RqZskYptQFu8L7P1rd1OIA.png","filter":"","backgroundSize":"","originalWidth":1972,"originalHeight":322,"strategy":"resample","height":0,"width":0},"twitterUsername":"googledevs","facebookPageName":"","publicEmail":"","collectionMastheadId":"","domain":"","sections":[{"type":2,"collectionHeaderMetadata":{"title":"Google Developers","description":"For Engineers, by Engineers","backgroundImage":{"id":"","originalWidth":0,"originalHeight":0,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"logoImage":{"id":"1*SOpy5LqydbP_eP6pGhwzjg.png","originalWidth":480,"originalHeight":480,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"alignment":1,"layout":1}},{"type":1,"postListMetadata":{"source":3,"layout":4,"number":4,"postIds":["8f42cae10644","6a360cc923ad","ccebadfd3eb5","41667fe69c80"],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":5,"postIds":[],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":6,"postIds":[],"tagSlug":"","posts":[]}}],"type":"Collection"},"homeCollectionId":"2e5ce7f173a5","title":"JavaScript Application Architecture On The Road To 2015","detectedLanguage":"en","latestVersion":"2dec8f81182c","latestPublishedVersion":"2dec8f81182c","hasUnpublishedEdits":false,"latestRev":1161,"createdAt":1418387477484,"updatedAt":1439403754802,"acceptedAt":0,"firstPublishedAt":1418649964037,"latestPublishedAt":1418773121283,"isRead":false,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundamental way in the last…","bodyModel":{"paragraphs":[{"name":"13fe","type":2,"text":"JavaScript Application Architecture On The Road To 2015","markups":[]},{"name":"8a7a","type":1,"text":"I once told someone I was an architect. It’s true in a way since I now have to design an intricate web of lies to back it up. On a serious note, I thought it might be salutary to look at the state of application architecture in the JavaScript community as we ebb our way towards 2015. I’ll talk about composition, functional boundaries, modularity, immutable data structures, CSP channels and a few other related topics.","markups":[]},{"name":"867c","type":3,"text":"Composition","markups":[]},{"name":"e592","type":1,"text":"On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundamental way in the last few years. Once you remove the minutia of machinery bringing forth unidirectional data-binding, immutable data-structures and virtual-DOM (all of which are interesting problem spaces) the one key concept that many devs seem to have organically converged on is composition. Composition is incredibly powerful, allowing us to stitch together reusable pieces of functionality to “compose” a larger application. Composition ushers in a mindset of things being good when they’re modular, smaller and easier to test. Easier to reason with. Easier to distribute. Heck, just look at how well that works for Node.","markups":[{"type":3,"start":613,"end":620,"href":"http://addyosmani.com/first","title":"","rel":"","anchorType":0},{"type":1,"start":221,"end":233},{"type":1,"start":235,"end":260},{"type":1,"start":265,"end":276},{"type":1,"start":399,"end":410}]},{"name":"0f14","type":4,"text":"A model for composition where an application is composed of smaller pieces of reusable UI which themselves are composed from extending and reusing existing modules and libraries.","markups":[],"layout":3,"metadata":{"id":"1*8fuXs-f2LJHYnEfxGKYdLA.png","originalWidth":2568,"originalHeight":1456}},{"name":"b809","type":1,"text":"Composition is one of the reasons we regularly talk about React “Components”, “Ember.Component”s, Angular directives, Polymer elements and of course, straight-up Web Components. We may argue about the frameworks and libraries surrounding these different flavours of component, but not that composition is inherently a bad thing. Note: earlier players in the JS framework game (Dojo, YUI, ExtJS) touted composition strongly and it’s been around forever but it’s taken us a while for most people to grok the true power of this model as broadly on the front-end.","markups":[]},{"name":"aedd","type":1,"text":"Composition is one solution to the problem of application complexity. Now, the way that languages in the web platform evolve are in direct response to the pain caused by such complexity. Complexity on its own can take lots of forms, but when we look at the landscape of how developers have been building for the web over the last few years, common patterns can be one the most obvious things worth considering baking in solutions for. This is why an acknowledgement by browser vendors that Web Components are important is actually a big deal. Even if you absolutely don’t use ‘our’ flavour of them (I’ll contest they are powerful), hopefully you dig composition enough to use a solution that offers it.","markups":[{"type":1,"start":0,"end":68}]},{"name":"c397","type":1,"text":"Where I hope we’ll see improvements in the future are around state synchronisation (synchronising state between your components DOM and your model/server) and utilising the power of composition boundaries.","markups":[]},{"name":"84fd","type":13,"text":"Composition Boundaries","markups":[]},{"name":"8885","type":1,"text":"It would be unfair to talk about composition on the web without also discussing Shadow DOM boundaries (humour me). It’s best to think about the feature as giving us true functional boundaries between widgets we’ve composed using regular old HTML. This lets us understand where one widget tree ends and another widget’s tree begins, giving us a chance to stop shit from a single widget leaking all over the page. It also allows us to scope down what CSS selectors can match such that deep widget structures can hide elements from expensive styling rules.","markups":[{"type":3,"start":80,"end":90,"href":"http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/","title":"","rel":"","anchorType":0}]},{"name":"222f","type":4,"text":"The shadow boundary is the barrier that separates the regular DOM (“light” DOM) from the shadow DOM","markups":[],"layout":1,"metadata":{"id":"1*8wTmS1mjdJ6EaaFPWkYNhg.png","originalWidth":2367,"originalHeight":1617}},{"name":"2bbc","type":1,"text":"If you haven’t played around with Shadow DOM, it allows a browser to include a subtree of DOM elements (e.g those representing a component) into the rendering of a document, but not into the main document DOM tree of the page. This creates a composition boundary between one component and the next allowing you to reason about components as small, independent chunks without having to rely on iframes. Browsers with Shadow DOM support can move across this boundary at ease, but inside that subtree of DOM elements you can compose a component using the same div, input and select tags you use today. This also protects the rest of the page from component implementation details hidden away inside the Shadow DOM.","markups":[{"type":1,"start":242,"end":263},{"type":1,"start":599,"end":711}]},{"name":"5857","type":1,"text":"How does Shadow DOM compare to just using an iframe, something used since the dawn of time for separating scope and styling? Other than being horrible, iframes were designed to insert completely separate HTML documents into the middle of another, meaning by design, meaning accessing DOM elements existing in an iframe (a completely separate context) was meant to be brittle and non-trivial by default. Also think about ‘inserting’ multiple components into a page with this mechanism. You would hit a separate URL for the iframe host content in each case, littering your markup with unwieldily iframe tags that have little to no semantic value. Components using Shadow DOM for their composition boundaries are (or should be) as straight-forward to consume and modify as native HTML elements.","markups":[]},{"name":"cb69","type":1,"text":"Playing Devil’s advocate, some may feel composition shouldn’t happen at the presentation layer (it may not be your cup of tea), others may agree it does. Let’s start off by saying you absolutely can have component composition without the use of Shadow DOM, however in order to achieve it, you end up having to be extremely disciplined about the boundaries of your components or add additional abstractions to make that happen. Shadow DOM gives you a way of doing this as a platform abstraction.","markups":[]},{"name":"7bd9","type":1,"text":"Whilst this is natively in Chrome and coming to other browsers in future, it’s exciting to see existing approaches exploring support for it — e.g React are exploring adding support for Shadow DOM and hope to evolve this work soon. Polymer already supports it and there appears to be interest from Ember and Angular in exploring this space.","markups":[{"type":3,"start":66,"end":72,"href":"https://hacks.mozilla.org/2014/12/mozilla-and-web-components/","title":"","rel":"","anchorType":0},{"type":3,"start":166,"end":172,"href":"https://twitter.com/addyosmani/status/542775855190376448","title":"","rel":"","anchorType":0}]},{"name":"166b","type":3,"text":"Component messaging","markups":[]},{"name":"d3cc","type":1,"text":"What about communicating between components? Well if you’re working with decoupled, modular components there are a few options here.","markups":[]},{"name":"1640","type":1,"text":"Direct reference via component APIs is undesirable (unless working on something super simple) as this introduces direct dependencies on specific versions of other components. If their APIs vastly change, you either have to pay the upgrade price or deal with breakage. Instead, you could use a classic global or in-component event system. If you require communication between components without a parent-child relationship, events + subscription remain a popular way option. In fact, React recommends this approach, unless components do have a parent-child relationships in which case just pass props. Angular uses Services for component communication and Polymer has a few options here: custom events, change watchers and the `\x3ccore-signals\x3e` element.","markups":[{"type":3,"start":594,"end":599,"href":"http://facebook.github.io/react/tips/communicate-between-components.html","title":"","rel":"","anchorType":0},{"type":1,"start":0,"end":174}]},{"name":"49c6","type":1,"text":"Is this the best we can do? Absolutely not. For events you’re going to fire-and-forget, the global event system model works relatively well but it becomes hairy once you start to need stateful events or chaining. As complexity grows, you may find that events interweave communication and flow control. Whilst there are many ways to improve your event system (e.g functional reactive programming) you may find yourself with events running arbitrarily large amounts of code.","markups":[{"type":1,"start":44,"end":211}]},{"name":"8546","type":1,"text":"What might be better than a global event system is CSP (Communicating Sequential Processes), a formalised way to describe communication in concurrent systems. CSP channels can be found in ClojureScript or Go and have been formalised in the core.async project. CSP (not to be confused with Content Security Policy) handles coordination of your processes using message passing, blocking execution when consuming or putting from channels, making it easier to express complex async flows. The issue they solve is at some point, you may require duplex channels and rely on a stringly-typed conventional way of doing this:","markups":[{"type":3,"start":51,"end":54,"href":"http://en.wikipedia.org/wiki/Communicating_sequential_processes","title":"","rel":"","anchorType":0},{"type":3,"start":240,"end":250,"href":"https://github.com/clojure/core.async/","title":"","rel":"","anchorType":0},{"type":1,"start":0,"end":54}]},{"name":"baf1","type":6,"text":"thingNeedsPhoto { id: 001, uuid: “foo” }\nthingPhoto { data: “../photo.png”, uuid: “foo” }","markups":[]},{"name":"6308","type":1,"text":"Later matching the two together. You’ve now mostly re-implemented function calls on top of a lossy, unoptimized event channel. Whenever there’s a mis-match because of a typo debugging is going to be a pain.","markups":[]},{"name":"61f3","type":4,"text":"","markups":[],"layout":3,"metadata":{"id":"1*tdy1UQP2PIXjE7GtxHXwRA.png","originalWidth":1855,"originalHeight":1106}},{"name":"d4be","type":1,"text":"Mechanisms derived from CSP provide abstractions for pieces of work to control other pieces of work. With primitives like this, it’s easier to build cooperative mechanisms for concurrency. CSP gives you a relatively low-level set of constructs. In Functional Reactive Programming, signals represent values that change over time. Signals have a push-based interface, which is why it’s reactive. FRP provides a purely functional interface so you don’t emit events, but you do have control flow structures allowing you to define transformations over base signals. Signals in FRP can be implemented using CSP channels.","markups":[{"type":1,"start":0,"end":189}]},{"name":"57ea","type":1,"text":"James Long and Tom Ashworth have some rock solid posts on CSP and Transducers (composable algorithmic transformations) are worth looking at if you find yourself wanting more than a global event system.","markups":[{"type":3,"start":0,"end":10,"href":"http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript","title":"","rel":"","anchorType":0},{"type":3,"start":15,"end":27,"href":"http://phuu.net/2014/08/31/csp-and-transducers.html","title":"","rel":"","anchorType":0}]},{"name":"53c4","type":1,"text":"Also, do check out the js-csp project which offers a close JavaScript port of ClojureScript’s core.async that implemented Inversion-Of-Control (IOC) encapsulation using Generators (yield statements) rather than macros.","markups":[{"type":3,"start":23,"end":29,"href":"https://github.com/ubolonton/js-csp","title":"","rel":"","anchorType":0},{"type":1,"start":23,"end":29}]},{"name":"f0de","type":3,"text":"ES6 & Browserify","markups":[]},{"name":"4ea2","type":1,"text":"I’ve written in the past about the net gains of large-scale systems that take advantage of decoupling and a sane approach to JavaScript ‘modules’. I consider us in a far far better position now than we were a few years ago, no longer just making do with AMD, RequireJS and the Module pattern.","markups":[]},{"name":"9601","type":1,"text":"We can thank the abundance of increasingly reliable tooling around Browserify (there’s an entire set of npm modules that are browserifiable) or a plethora of transpilation-friendly ES6 features; super-useful while we wait for ES6 Modules to eventually ship in browsers.","markups":[{"type":3,"start":90,"end":100,"href":"http://browserifysearch.org/","title":"","rel":"","anchorType":0},{"type":3,"start":158,"end":180,"href":"https://github.com/addyosmani/es6-tools#transpilers","title":"","rel":"","anchorType":0},{"type":3,"start":226,"end":237,"href":"http://www.2ality.com/2014/09/es6-modules-final.html","title":"","rel":"","anchorType":0},{"type":2,"start":90,"end":96}]},{"name":"fd36","type":4,"text":"es6ify by @thlorenz and @domenic result in a relatively nice pipeline for working with ES5 & ES6 with full support for source maps.","markups":[{"type":3,"start":10,"end":19,"href":"http://twitter.com/thlorenz","title":"Twitter profile for @thlorenz","rel":"","anchorType":0},{"type":3,"start":24,"end":32,"href":"http://twitter.com/domenic","title":"Twitter profile for @domenic","rel":"","anchorType":0}],"layout":1,"metadata":{"id":"1*tNh8NTBrl74k06Id07Wggw.png","originalWidth":2010,"originalHeight":1428}},{"name":"1969","type":1,"text":"In many cases we’ve moved beyond this and it’s almost passe to frown at someone using a build-step in their authoring workflow. Plenty of JS library authors are similarly happy to use ES6 for their pre-built source.","markups":[{"type":3,"start":128,"end":134,"href":"https://github.com/sindresorhus/esnext-showcase","title":"","rel":"","anchorType":0},{"type":1,"start":0,"end":128}]},{"name":"856d","type":1,"text":"ES6 Modules solve a plethora of issues we’ve faced in dependency and deployment, allowing us to create modules with explicit exports, import named exports from those modules and keep their names separate. They’re something of a combination between the asynchronous nature of AMD (needed in the browser) and the clarity of code you find in CommonJS, also handling circular dependencies in a better fashion.","markups":[{"type":1,"start":0,"end":204}]},{"name":"1a49","type":1,"text":"With deps in ES6 modules being static we have a statically analyzable dependency graph which is hugely useful. They’re also significantly more clean than using CommonJS (despite Browserify workflows making it pretty pleasant to use). In order to support CommonJS in the browser context, you either wrap the module or XHR it in, wrap yourself and eval. Whilst this allows it to work in browsers, ES6 modules support both web and server use-cases more cleanly as they were designed from the bottom-up to support both.","markups":[]},{"name":"bd66","type":1,"text":"On the native front, I’ve also been excited to see support for ES6 primitives continue to be natively explored in V8, Chakra, SpiderMonkey, and JSC. Perhaps the biggest surprise for me was IE Tech Preview shooting up to 32/44 on the ES6 compat table ahead of everyone else:","markups":[{"type":3,"start":233,"end":249,"href":"http://kangax.github.io/compat-table/es6/","title":"","rel":"","anchorType":0}]},{"name":"e6a5","type":4,"text":"IE Tech Preview already has support for ES6 Classes, for…of, Maps, Sets, typed arrays, Array.prototype methods and many other features.","markups":[],"layout":1,"metadata":{"id":"1*mWPAXNkZmc5gjGU-rKNung.png","originalWidth":1024,"originalHeight":657}},{"name":"14dd","type":1,"text":"In case you’ve missed the V8 progress updates I’ve been posting, here are a few reminders:","markups":[]},{"name":"6126","type":1,"text":"Template Strings/Literals with embedded expressions enabling easier string interpolation:","markups":[{"type":1,"start":0,"end":89}]},{"name":"e5fc","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*_WC8llYhsfJsfvAAmDAKcg.png","originalWidth":1260,"originalHeight":996}},{"name":"5c94","type":1,"text":"Object Literal Extensions. Shorthand properties and methods will help us save keystrokes:","markups":[{"type":1,"start":0,"end":89}]},{"name":"0782","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*tQT637o53hR239FRXkwJvg.png","originalWidth":1024,"originalHeight":1167}},{"name":"df59","type":1,"text":"ES6 Classes bringing syntactical sugar over today’s objects and prototypes:","markups":[{"type":1,"start":0,"end":75}]},{"name":"44bb","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*HXf8FBnCOaKtURSu6a0oag.png","originalWidth":1428,"originalHeight":1554}},{"name":"57e0","type":1,"text":"Whether it’s ES6 features or CommonJS modules we have sufficient tooling to gift our projects with strong compositions whether they’re client or server-side, isomorphic or otherwise. That’s kind of amazing. Don’t get me wrong, we have a long road ahead towards maturing the quality of our ecosystems but our composition story for the front-end is strong today.","markups":[]},{"name":"17e2","type":1,"text":"Side: As we’ve already talked about Web Components, HTML Imports are worth a mention here too. JavaScript modules may not always be the best container format for components & their corresponding templates — a lot of people still use additional tooling to load and parse them.","markups":[{"type":3,"start":52,"end":64,"href":"http://www.html5rocks.com/en/tutorials/webcomponents/imports/","title":"","rel":"","anchorType":0},{"type":1,"start":141,"end":157},{"type":2,"start":114,"end":121}]},{"name":"8875","type":1,"text":"There’s an argument to be made that as we as JS developers have an existing and somewhat mature ecosystem of tooling around scripts, moving back to HTML and having to rewrite tools to support it as a dependency mechanism can feel backwards. I see this problem in-part solved with tools like Vulcanize (for flattening imports) and hopefully going away with HTTP2.","markups":[{"type":3,"start":291,"end":300,"href":"https://www.polymer-project.org/articles/concatenating-web-components.html","title":"","rel":"","anchorType":0},{"type":1,"start":268,"end":275}]},{"name":"15c5","type":1,"text":"I’m personally conflicted about how much machinery should go in pure script vs. an import and where the lines draw when we start to look at ES6 module interop. That said, HTML imports are a nice way to both package component resources but always loads scripts without blocking the parser (they still block the load event). I remain hopeful that we’ll see usage of imports, modules and interop of both systems evolve in the future.","markups":[]},{"name":"2749","type":3,"text":"The Offline Problem","markups":[]},{"name":"ddf0","type":1,"text":"We don’t really have a true mobile web experience if our applications don’t work offline.","markups":[{"type":1,"start":0,"end":89}]},{"name":"0a15","type":1,"text":"There have been fundamental challenges in achieving this in the past, but things are getting better. This year, APIs in the web platform have continued to evolve in a direction giving us better primitives, most interestingly of late, Service Workers. Service Workers are an API allowing us to make sites work offline through intercepting network requests and programmatically telling the browser what to do with these requests.","markups":[{"type":3,"start":234,"end":249,"href":"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API/Using_Service_Workers","title":"","rel":"","anchorType":0}]},{"name":"17ba","type":4,"text":"Service Worker enabling an offline experience for the Chrome Dev Summit site. This feature is available in Chrome 40 beta and above.","markups":[],"layout":2,"metadata":{"id":"1*x0SAVPw0NR1Efq_Y__hqsA.png","originalWidth":820,"originalHeight":1488}},{"name":"510a","type":1,"text":"They’re what AppCache should have been, except with the right level of control. We can cache content, modify what is served and treat the network like an enhancement. You can learn more about Service Worker through Matt Gaunt’s excellent Service Worker primer or Jake Archibald’s masterful offline patterns article.","markups":[{"type":3,"start":238,"end":259,"href":"http://www.html5rocks.com/en/tutorials/service-worker/introduction/","title":"","rel":"","anchorType":0},{"type":3,"start":290,"end":306,"href":"http://jakearchibald.com/2014/offline-cookbook/","title":"","rel":"","anchorType":0}]},{"name":"07ee","type":1,"text":"In 2015, I would like to see us evolve more routing and state-management libraries to be built on top of Service Workers. First-class offline and syncronization support for any routes you’ve navigated to would be huge, especially if developers can get them for next to free.","markups":[]},{"name":"f605","type":4,"text":"Sneak peek of the Push API working in Chrome for Android.","markups":[],"layout":2,"metadata":{"id":"1*YiLL1pNOixlZ2nN7xBp6AA.jpeg","originalWidth":1080,"originalHeight":544}},{"name":"84cb","type":1,"text":"This would help us offer significant performance improvements for repeat visits through cached views and assets. Service Workers are also somewhat of a bedrock API and request control is only the first of a plethora of new functionality we may get on top of them, including Push Notifications and Background Syncronization.","markups":[{"type":3,"start":274,"end":292,"href":"https://w3c.github.io/push-api/","title":"","rel":"","anchorType":0},{"type":3,"start":297,"end":322,"href":"https://github.com/slightlyoff/BackgroundSync","title":"","rel":"","anchorType":0}]},{"name":"7e57","type":1,"text":"To learn more about how to use Push Notifications in Chrome today, read Push Notifications & Service Worker by Matt Gaunt.","markups":[{"type":3,"start":72,"end":107,"href":"https://gauntface.com/blog/2014/12/15/push-notifications-service-worker","title":"","rel":"","anchorType":0}]},{"name":"b953","type":3,"text":"Component APIs and Facades","markups":[]},{"name":"daf9","type":1,"text":"One could argue that the “facade pattern” I’ve touched on in previous literature is still viable today, especially if you don’t allow the implementation details of your component leak into its public API. If you are able to define a clean, robust interface to your component, consumers of it can continue to utilize said components without worrying about the implementation details . Those can change at any time with minimal breakage.","markups":[{"type":3,"start":61,"end":69,"href":"http://addyosmani.com/largescalejavascript/","title":"","rel":"","anchorType":0}]},{"name":"3db4","type":1,"text":"An addendum to this could be that this is a good model for framework and library authors to follow for public components they ship. While this is absolutely not tied to Web Components, I’ve enjoyed seeing the Polymer paper-* elements evolve over time with the machinery behind the scenes having minimal impact to public component APIs. This is inherently good for users. Try not to violate the principle of least astonishment i.e the users of your component API shouldn’t be surprised by behaviour. Hold this true and you’ll have happier users and a happier team.","markups":[]},{"name":"55d8","type":3,"text":"Immutable & persistent data structures","markups":[]},{"name":"25cc","type":1,"text":"In previous write-ups on large-scale JS, I haven’t really touched on immutability or persistent data structures. If you’ve crossed paths with libraries like immutable-js or Mori and been unclear on where their value lies, a quick primer may be useful.","markups":[{"type":3,"start":157,"end":169,"href":"https://github.com/facebook/immutable-js","title":"","rel":"","anchorType":0},{"type":3,"start":173,"end":177,"href":"http://swannodette.github.io/mori/","title":"","rel":"","anchorType":0}]},{"name":"c94f","type":1,"text":"An immutable data structure is one that can’t be modified after it has been created, meaning the way to efficiently modify it would be making a mutable copy. A persistent data structure is one which preserves the previous versions of itself when changed. Data structures like this are immutable (their state cannot be modified once created). Mutations don’t update the in-place structure, but rather generate a new updated structure. Anything pointing to the original structure has a guarantee it won’t ever change.","markups":[{"type":1,"start":3,"end":12},{"type":1,"start":160,"end":170}]},{"name":"5ae7","type":6,"text":"The real benefit behind persistent data structures is referential equality so it’s clear by comparing the address in memory, you have not only the same object but also the same data ~ Pascal Hartig, Twitter.","markups":[{"type":1,"start":0,"end":184}]},{"name":"1d47","type":1,"text":"Let’s try to rationalize immutable data structures in the form of a Todo app. Imagine in our app we have a normal JS array for our Todo items. There’s a reference to this array in memory and it has a specific value. A user then adds a new Todo item, changing the array. The array has now been mutated. In JavaScript, the in-memory reference to this array doesn’t change, but the value of what it is pointing to has.","markups":[]},{"name":"c27a","type":1,"text":"For us to know if the value of our array has changed, we need to perform a comparison on each element in the array — an expensive operation. Let’s imagine that instead of a vanilla array, we have an immutable one. This could be created with immutable-js from Facebook or Mori. Modifying an item in the array, we get back a new array and a new array reference in memory.","markups":[]},{"name":"e01d","type":1,"text":"If we were to go back and check the reference to our array in memory is the same, it’s guaranteed not to have changed. The value will be the same. This enables all kinds of things, like fast and efficient equality checking. As you’re only checking the reference rather than every value in the Todos array the operation is cheaper.","markups":[]},{"name":"f478","type":1,"text":"As mentioned, immutability should allow us to guarantee a data structure (e.g Todos) hasn’t been tampered. For example (rough code):","markups":[]},{"name":"577e","type":6,"text":"var todos = [‘Item 1', ‘Item 2', ‘Item 3'];\nupdateTodos(todos, newItem);\ndestructiveOpOnTodos(todos);\nconsole.assert(todos.length === 3);","markups":[]},{"name":"4f66","type":1,"text":"At the point we hit the assertion, it’s guaranteed that none of the ops since array creation have mutated it. This probably isn’t a huge deal if you’re strict about changing data structures, but this updates the guarantee from a “maybe” to a “definitely”.","markups":[]},{"name":"19e6","type":1,"text":"I’ve previously walked through implementing an Undo stack using existing platform tech like Mutation Observers. If you’re working on a system using this, there’s a linear increase involved in the cost of memory usage. With persistent data structures, that memory usage can potentially be much smaller if your undo stack uses structural sharing.","markups":[]},{"name":"1aac","type":1,"text":"Immutability comes with a number of benefits, including:","markups":[]},{"name":"8508","type":9,"text":"Typically destructive updates like adding, appending or removing on objects belonging to others can be performed without unwanted side-effects.","markups":[]},{"name":"dbc3","type":9,"text":"You can treat updates like expressions as each change generates a value.\nYou get the ability to pass objects as arguments to functions and not worry about those functions mutating the object.","markups":[]},{"name":"c870","type":9,"text":"These benefits can be helpful for writing web apps, but it’s also possible to live without them as well and many have.","markups":[]},{"name":"60c6","type":1,"text":"How does immutability relate to things like React? Well, let’s talk about application state. If state is represented by a data structure that is immutable, it is possible to check for reference equality right when making a call on re-rendering the app (or individual components). If the in-memory reference is equal, you’re pretty much guaranteed data behind the app or component hasn’t been changed. This allows you to bail and tell React that it doesn’t need to re-render.","markups":[]},{"name":"ddad","type":1,"text":"What about Object.freeze? Where you to read through the MDN description of Object.freeze(), you might be curious as to why additional libraries are still required to solve the issue of immutability. Object.freeze() freezes an object, preventing new properties from being added to it, existing properties from being removed and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. Great, so...why isn’t this enough?","markups":[{"type":3,"start":56,"end":71,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze","title":"","rel":"","anchorType":0}]},{"name":"a8f5","type":1,"text":"Well, you technically could use Object.freeze() to achieve immutability, however, the moment you need to modify those immutable objects you will need to perform a deep copy of the entire object, mutate the copy and then freeze it. This is often too slow to be of practical use in most use-cases. This is really where solutions like immutable-js and mori shine. They also don’t just assist with immutability — they make it more pleasant to work with persistent data structures if you care about avoiding destructive updates.","markups":[]},{"name":"d442","type":13,"text":"Are they worth the effort?","markups":[]},{"name":"6ed7","type":1,"text":"Immutable data structures (for some use-cases) make it easier to avoid thinking about the side-effects of your code. If working on a component or app where the underlying data may be changed by another entity, you don’t really have to worry if your data structures are immutable. Perhaps the main downside to immutability are the memory performance drawbacks, but again, this really depends on whether the objects you’re working with contain lots of data or not.","markups":[{"type":1,"start":0,"end":278}]},{"name":"a4c7","type":3,"text":"We have a long way to go yet","markups":[]},{"name":"5600","type":1,"text":"Beyond an agreement that composition is fundamentally good, we still disagree on a lot. Separation of concerns. Data-flow. Structure. The necessity for immutable data structures. Data-binding (two-way isn’t always better than one-way binding and depends on how you wish to model mutable state for your components). The correct level of magic for our abstractions. The right place to solve issues with our rendering pipelines (native vs. virtual diffing). How to hit 60fps in our user-interfaces. Templating (yes, we’re still not all using the template tag yet).","markups":[]},{"name":"2155","type":3,"text":"Onward and upward","markups":[]},{"name":"a82f","type":1,"text":"Ultimately how you ‘solve’ these problems today comes down to asking yourself three questions:","markups":[]},{"name":"275d","type":1,"text":"1. Are you happy delegating such decisions and choices to an opinionated framework?\n2. Are you happy ‘composing’ solutions to these problems using existing modules?\n3. Are you happy crafting (from scratch) the architecture and pieces that solve these problems on your own?","markups":[]},{"name":"863b","type":1,"text":"I’m an idiot, still haven’t ‘figured’ this all out and am still learning as I go along. With that, please feel free to share your thoughts on the future of application architecture, whether there is more needed on the platform side, in patterns or in frameworks. If my take on any of the problems in this space is flawed (it may well be), please feel free to correct me or suggest more articles for my holiday reading list below:","markups":[]},{"name":"da2e","type":9,"text":"The Offline Cookbook","markups":[{"type":3,"start":0,"end":20,"href":"http://jakearchibald.com/2014/offline-cookbook/","title":"","rel":"","anchorType":0}]},{"name":"a233","type":9,"text":"Why it’s ridiculous to say ‘generators solve async’","markups":[{"type":3,"start":0,"end":51,"href":"https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c","title":"","rel":"","anchorType":0}]},{"name":"a67c","type":9,"text":"CSP and Transducers in JavaScript","markups":[{"type":3,"start":0,"end":33,"href":"http://phuu.net/2014/08/31/csp-and-transducers.html","title":"","rel":"","anchorType":0}]},{"name":"b337","type":9,"text":"Communicating Sequential Processes — Hoare","markups":[{"type":3,"start":0,"end":42,"href":"http://www.usingcsp.com/cspbook.pdf","title":"","rel":"","anchorType":0}]},{"name":"9817","type":9,"text":"Transducers and benchmarks","markups":[{"type":3,"start":0,"end":26,"href":"http://jlongster.com/Transducers.js-Round-2-with-Benchmarks","title":"","rel":"","anchorType":0}]},{"name":"c59f","type":9,"text":"HTML Exports — Importing HTML via ES6 Modules","markups":[{"type":3,"start":0,"end":45,"href":"https://github.com/nevir/html-exports","title":"","rel":"","anchorType":0}]},{"name":"2829","type":9,"text":"Flux in Practice","markups":[{"type":3,"start":0,"end":16,"href":"https://medium.com/@garychambers108/flux-in-practice-ec08daa9041a","title":"","rel":"","anchorType":0}]},{"name":"b653","type":9,"text":"Practical Workflows for ES6 Modules","markups":[{"type":3,"start":0,"end":35,"href":"http://guybedford.com/practical-workflows-for-es6-modules","title":"","rel":"","anchorType":0}]},{"name":"a9c7","type":9,"text":"Traceur, Gulp, Browserify and ES6","markups":[{"type":3,"start":0,"end":33,"href":"http://www.mattgreer.org/articles/traceur-gulp-browserify-es6/","title":"","rel":"","anchorType":0}]},{"name":"688e","type":9,"text":"Functional Programming in Javascript === Garbage","markups":[{"type":3,"start":0,"end":48,"href":"http://awardwinningfjords.com/2014/04/21/functional-programming-in-javascript-equals-garbage.html","title":"","rel":"","anchorType":0}]},{"name":"78b2","type":1,"text":"Note: You’ll notice a lack of content here around Web Components. As my work with Chrome covers articles written on Web Components primitives and Polymer, I feel sufficiently coverered (maybe not!), but am always open to new explorations around these topics if folks have links to share.","markups":[{"type":3,"start":116,"end":141,"href":"http://webcomponents.org/polyfills/","title":"","rel":"","anchorType":0},{"type":3,"start":146,"end":153,"href":"https://www.polymer-project.org/articles/","title":"","rel":"","anchorType":0},{"type":2,"start":0,"end":287}]},{"name":"7e14","type":1,"text":"I’m particularly interested in how we bridge the gaps between Web Components and Virtual-DOM diffing approaches, where we see component messaging patterns evolving here and what you feel the web is still missing for application authors.","markups":[]}],"sections":[{"name":"e8cd","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","createdAtRelative":"a year ago","updatedAtRelative":"4 months ago","acceptedAtRelative":"","createdAtEnglish":"December 12, 2014","updatedAtEnglish":"August 12, 2015","acceptedAtEnglish":"","firstPublishedAtEnglish":"December 15, 2014","latestPublishedAtEnglish":"December 16, 2014","allowNotes":true,"snippet":"On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundamental way in the last…","previewImage":{"imageId":"1*8fuXs-f2LJHYnEfxGKYdLA.png","filter":"","backgroundSize":"","originalWidth":2568,"originalHeight":1456,"strategy":"resample","height":0,"width":0},"wordCount":3787,"imageCount":10,"readingTime":15.540566037735848,"subtitle":"On an architectural level, the way we craft large-scale applications in JavaScript has changed in at least one fundamental way in the last…","publishedInCount":1,"usersBySocialRecommends":[],"latestPublishedAtAbbreviated":"Dec 16, 2014","firstPublishedAtAbbreviated":"Dec 15, 2014","emailSnippet":"I once told someone I was an architect. It’s true in a way since I now have to design an intricate web of lies to back it up. On a serious note, I thought it might be salutary to look at the state of application architecture in the JavaScript community as we ebb our way towards 2015. I’ll talk about composition, functional boundaries, modularity, immutable data structures, CSP channels and a few other related topics.","recommends":990,"socialRecommends":[],"isBookmarked":false,"tags":[],"socialRecommendsCount":0,"responsesCreatedCount":3},"coverless":true,"slug":"javascript-application-architecture-on-the-road-to-2015","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":false,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"isViewed":false,"uniqueSlug":"javascript-application-architecture-on-the-road-to-2015-d8125811101b","previewContent":{"bodyModel":{"paragraphs":[{"name":"13fe","type":2,"text":"JavaScript Application Architecture On The Road To 2015","markups":[],"alignment":1},{"name":"8a7a","type":1,"text":"I once told someone I was an architect. It’s true in a way since I now have to design an intricate web of lies to back it up. On a serious note, I thought it might be salutary to look at the state of application architecture in the…","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.com/google-developers/javascript-application-architecture-on-the-road-to-2015-d8125811101b","approvedHomeCollectionId":"2e5ce7f173a5","approvedHomeCollection":{"id":"2e5ce7f173a5","name":"Google Developers","slug":"google-developers","tags":["DEVELOPERS","GOOGLE"],"creatorId":"991272e72e68","description":"Engineering and technology articles for developers, written and curated by Googlers. The views expressed are those of the authors and don’t necessarily reflect those of Google.","shortDescription":"Engineering and technology articles for developers, written…","image":{"imageId":"1*YPxqkb8PlWYBtLLJiPWNbg.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":7877,"postCount":53,"activeAt":1449006574991},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false},"isSubscribed":false,"isNewsletterSubscribed":false},"logo":{"imageId":"1*RqZskYptQFu8L7P1rd1OIA.png","filter":"","backgroundSize":"","originalWidth":1972,"originalHeight":322,"strategy":"resample","height":0,"width":0},"twitterUsername":"googledevs","facebookPageName":"","publicEmail":"","collectionMastheadId":"","domain":"","sections":[{"type":2,"collectionHeaderMetadata":{"title":"Google Developers","description":"For Engineers, by Engineers","backgroundImage":{"id":"","originalWidth":0,"originalHeight":0,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"logoImage":{"id":"1*SOpy5LqydbP_eP6pGhwzjg.png","originalWidth":480,"originalHeight":480,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"alignment":1,"layout":1}},{"type":1,"postListMetadata":{"source":3,"layout":4,"number":4,"postIds":["8f42cae10644","6a360cc923ad","ccebadfd3eb5","41667fe69c80"],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":5,"postIds":[],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":6,"postIds":[],"tagSlug":"","posts":[]}}],"type":"Collection"},"newsletterId":"","type":"Post","_isPopulated":true},"collaborators":[{"user":{"userId":"19026c4fef9d","name":"Pascal Hartig","username":"passy","createdAt":1346548347325,"lastPostCreatedAt":0,"imageId":"0*Q82JFpHKLAxrFeO3.jpeg","backgroundImageId":"1*QvHra9ZRpredaLiWng5hDQ.jpeg","bio":"Software Engineer at Twitter","twitterScreenName":"passy","facebookAccountId":"","type":"User"},"state":"visible","_isPopulated":true}],"footerPromo":{"promoId":"read_next_sign_in_tnt","isDismissable":false,"imageId":"1*OlgaspZ00W78xQY-HE9Wsg.png"},"collectionUserRelations":[],"mode":null,"references":{"User":{"2508e4c7a8ec":{"userId":"2508e4c7a8ec","name":"Addy Osmani","username":"addyosmani","createdAt":1358466215909,"lastPostCreatedAt":1447752256679,"imageId":"0*reRpQxs2HZap9q6V.jpeg","backgroundImageId":"","bio":"Staff Engineer at Google working with the Chrome team • Creator of TodoMVC, Yeoman, Material Design Lite, Web Starter Kit • Passionate about web tooling","twitterScreenName":"addyosmani","socialStats":{"userId":"2508e4c7a8ec","usersFollowedCount":624,"usersFollowedByCount":36706,"type":"SocialStats"},"social":{"userId":"lo_9733c1bc4e7a","targetUserId":"2508e4c7a8ec","type":"Social"},"facebookAccountId":"","type":"User"}},"Collection":{"2e5ce7f173a5":{"id":"2e5ce7f173a5","name":"Google Developers","slug":"google-developers","tags":["DEVELOPERS","GOOGLE"],"creatorId":"991272e72e68","description":"Engineering and technology articles for developers, written and curated by Googlers. The views expressed are those of the authors and don’t necessarily reflect those of Google.","shortDescription":"Engineering and technology articles for developers, written…","image":{"imageId":"1*YPxqkb8PlWYBtLLJiPWNbg.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":7877,"postCount":53,"activeAt":1449006574991},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":true,"canRemove":true,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false},"isSubscribed":false,"isNewsletterSubscribed":false},"logo":{"imageId":"1*RqZskYptQFu8L7P1rd1OIA.png","filter":"","backgroundSize":"","originalWidth":1972,"originalHeight":322,"strategy":"resample","height":0,"width":0},"twitterUsername":"googledevs","facebookPageName":"","publicEmail":"","collectionMastheadId":"","domain":"","sections":[{"type":2,"collectionHeaderMetadata":{"title":"Google Developers","description":"For Engineers, by Engineers","backgroundImage":{"id":"","originalWidth":0,"originalHeight":0,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"logoImage":{"id":"1*SOpy5LqydbP_eP6pGhwzjg.png","originalWidth":480,"originalHeight":480,"backgroundSize":"","filter":"","isFeatured":false,"externalSrc":""},"alignment":1,"layout":1}},{"type":1,"postListMetadata":{"source":3,"layout":4,"number":4,"postIds":["8f42cae10644","6a360cc923ad","ccebadfd3eb5","41667fe69c80"],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":5,"postIds":[],"tagSlug":"","posts":[]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":6,"postIds":[],"tagSlug":"","posts":[]}}],"type":"Collection"}},"Social":{"2508e4c7a8ec":{"userId":"lo_9733c1bc4e7a","targetUserId":"2508e4c7a8ec","type":"Social"}},"SocialStats":{"2508e4c7a8ec":{"userId":"2508e4c7a8ec","usersFollowedCount":624,"usersFollowedByCount":36706,"type":"SocialStats"}}}})
// ]]></script></body></html>